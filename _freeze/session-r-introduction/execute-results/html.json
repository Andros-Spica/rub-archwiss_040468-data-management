{
  "hash": "d616e5c21d3654a30d803b0c6c46143c",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction to R {#sec-r-introduction}\n\n## Preparation\n\nBefore learning more about R, make sure that everything is set up properly and that you understand the basics in RStudio GUI. \n\n::: {.callout-caution  collapse=\"true\"}\n## CHECK: R and RStudio installation {.unnumbered}\n\nTo ensure that both R and RStudio have been installed correctly, follow these steps:\n\n1. Launch RStudio by searching for it in your applications menu.  \n2. When it opens, you should see an interface with multiple panels, including the Console in the left or bottom left panel.    \n3. In the RStudio Console, you should see details about the R version currently running, which confirms that both R and RStudio are correctly installed and linked. You can always re-print this information by typing the command `version`.\n\nIf any of these steps fail, consider reinstalling R and RStudio, ensuring they are compatible with your operating system.\n\n:::\n\n### RStudio interface (GUI)\n\nThe RStudio interface, or Graphical User Interface (GUI), is designed to help you work efficiently with R. By default, it consists of four main panes or panels, each potentially containing multiple tabs:\n\n1. **Console/Terminal/Background Jobs**: This is where you can type and run R commands directly. It displays output from your code and any error messages.  \n2. **Environment/History/Connections/Build/Git**: In the top-right, the Environment tab shows all active variables and data loaded into your session, while the History tab keeps a log of previously executed commands.  \n3. **Files/Plots/Packages/Help/...**: The bottom-right panel has several tabs for navigating your files, viewing plots and other graphical outputs, managing installed packages, and accessing R documentation.  \n4. **Source or Script Editor**: Located in the top-left, here is where you can write, edit, and save R scripts. You can run selected code from this editor directly in the Console. *This panel will be absent whenever there are no script files open in RStudio.*  \n\n![RStudio GUI default structure; from @noauthor_rstudio_2024](https://docs.posit.co/ide/user/ide/guide/ui/images/rstudio-panes-labeled.jpeg)\n\nMany of the various elements of RStudio GUI are self-explanatory or further explained by pop-up texts and windows. Still, beginners and occasional users can be assured that most elements can be ignored. \n\n### Global Settings\n\nTo customize RStudio, go to Tools > Global Options (or RStudio > Preferences on macOS). Here, you can adjust various settings, including:\n\n* General: Setting the directory path where R has been installed (normally assigned automatically), your default working directory and specify start-up options.  \n* Code: Configuring code formatting, autocompletion, and syntax highlighting settings.\n* Appearance: Change the editor theme, font size, and other visual preferences.  \n* Pane Layout: Changing the default pane structure (not recommended).\n\n### RStudio Projects\n\nRStudio Projects help organize your work by keeping all related files, scripts, data, and outputs in one place. Each project has its own working directory, which helps to manage dependencies and to maintain reproducibility. Projects are especially useful for keeping different analyses or projects separate from one another.\n\nTo create a new project in RStudio, follow these steps:\n\n1. Go to File > New Project.\n2. You’ll see three options:\n    - *New Directory*: Create a project from scratch within a new folder. This is useful when starting a completely new analysis or project.  \n    - *Existing Directory*: Convert an existing folder into an RStudio project. Ideal for organizing already-existing files and scripts into a RStudio project.  \n    - *Version Control*: Clone a project from GitHub, GitLab, or other version control systems. This option is helpful when working with collaborative projects or version-tracked repositories.  \n3. Select the appropriate option based on your needs. For example, if you choose New Directory, you can then select New Project, enter a project name, and specify the location to save it. Alternatively, if you are working with a GitHub repository, you could select Version Control to clone it directly into RStudio, creating a fully synchronized project environment.  \n4. Click Create Project. RStudio will open a new R session within the project’s directory.  \n\n### R Scripts and Rmarkdown notebooks\n\nIn RStudio, both R scripts and Rmarkdown notebooks (or rendered notebooks) are used to write and execute R code, but they serve different purposes and have distinct features:\n\n#### Scripts (.R files) {.unnumbered}\n\n* Plain Text Format: Scripts are simple text files where you can write and save R code (.R file extension). They are best suited for running sequential code and writing reusable functions.  \n* Execution: You can run code line-by-line or in chunks directly in the Console. Scripts are ideal for production workflows or larger projects where maintaining clear, reproducible code is a priority.  \n* Comments: You can add comments for documentation, but scripts do not natively support rich formatting like Markdown.\n\nExample of a small R script, \"print_mean_value.R\", followed by its output once executed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean of a numeric vector\nnumbers <- c(1, 2, 3, 4, 5)\nmean_value <- mean(numbers)\nprint(mean_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nIn this script, we define a vector, calculate its mean, and print the result. The focus is on the code itself, without additional formatting or documentation.\n\n#### Rmarkdown documents (.Rmd/.qmd files) {.unnumbered}\n\n* Rich Content: RStudio allows you to create and use special files, named RMarkdown (.Rmd file extension), that combine formatted text in Markdown (e.g. headings, images, and links) and executable pieces of code or code \"chunks\". When added to a Rmarkdown, the code inside a chunk can be executed on-demand by clicking on the play button on its top right corner.\n\n* Interactive Execution: Rmarkdown supports interactive, cell-based execution, similar to [Jupyter notebooks](https://jupyter.org/). Each code cell outputs results directly below it by default, which is useful for exploratory data analysis and iterative workflows.\n\n* Output Options: Notebooks can be rendered into various formats, such as HTML, PDF, or Word, allowing you to create polished, shareable reports directly from your analysis.  It is possible to have code being run and rendered with output directly into a HTML file by choosing `html_notebook`, a type of output that approaches the one of [Jupyter notebooks](https://jupyter.org/).\n\nExample of a small RMarkdown document, \"mean_value_analysis.Rmd\":\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n````\n\n## Calculate the Mean of a Vector\n\nIn this analysis, we calculate the mean of a simple numeric vector.\n\n```{r}\n# Define the numeric vector\nnumbers <- c(1, 2, 3, 4, 5)\n\n# Calculate the mean\nmean_value <- mean(numbers)\nmean_value\n```\n\nThe mean of the vector is `r mean_value`.\n````\n\n\n:::\n:::\n\n\nIn this document, Markdown is used to add a heading and text explanation, while the code chunk calculates and displays the mean. The output is shown directly below the code, creating an interactive, document-like format. Notice we can also use \\` r object_name \\` to print inside a markdown line the value of an R object, in this case a single number.\n\nHow it would look in RStudio:\n\n![RMarkdown example in RStudio](assets/images/RMarkdown-example.png)\n\nAnd this is how it would be rendered in HTML:\n\n## Calculate the Mean of a Vector {.unnumbered}\n\nIn this analysis, we calculate the mean of a simple numeric vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the numeric vector\nnumbers <- c(1, 2, 3, 4, 5)\n\n# Calculate the mean\nmean_value <- mean(numbers)\nmean_value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nThe mean of the vector is 3.\n\nYou can learn more about Rmarkdown at the [Get Started tutorial](https://rmarkdown.rstudio.com/lesson-1.html) offered by its developers.\n\nIn summary, **scripts** are optimal for code-centric work with minimal formatting, while **Rmarkdown documents** offer a flexible, document-like interface ideal for combining narrative and code in a single file. \n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\n* @grolemund_r_nodate\n* @noauthor_r_nodate\n* @noauthor_introduction_nodate\n\n:::\n\n### Creating or editing other files\n\nIn addition to R scripts (.R) and RMarkdown notebooks (.Rmd), RStudio supports creating and editing various other file types, making it a versatile environment for different types of content and workflows. To create a new file, go to File > New File and select the desired file type.\n\nSome examples of files you can create and edit in RStudio include:\n\n* **Plain Text** files (.txt): Useful for notes, raw data, or configuration files.\n* **HTML** files (.html): For creating and editing web pages, especially useful for generating custom reports.\n* **Python** scripts (.py): RStudio supports Python, allowing you to write and execute Python code within the same environment if Python is installed on your computer.\n* **SQL** files (.sql): You can write and run [SQL queries](https://www.w3schools.com/sql/sql_syntax.asp) directly in RStudio when working with databases.\n\nTo create a file with an extension **_not_** listed in RStudio, simply create a plain text file (e.g., \"newFile.txt\"), modify its name and add the desired extension (e.g., \"newFile.json\", \"newFile.css\", etc.). This flexibility allows you to manage all parts of your project, from data processing to documentation, within RStudio.\n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\nFor more information about RStudio, consult: \n\n- @noauthor_rstudio_2024\n- @noauthor_rstudio_nodate\n\n:::\n\n## R syntax and workflow\n\n### Basic R syntax: variables and data types\n\nIn R, variables are created by assigning values using the `<-` operator. R supports various data types, including:\n\n* **Numeric**: Numbers, e.g., `x <- 10.5`\n* **Integer**: Whole numbers, declared with L, e.g., `y <- 3L`\n* **Character**: Text, surrounded by quotes, e.g., `name <- \"Alice\"`\n* **Logical**: Boolean values, `TRUE` or `FALSE`, e.g., `is_true <- TRUE`\n* **Factor**: Categorical data, useful for storing distinct categories, and keeping both category names and indexed numeric value (see Data structures bellow).\n\nVariables store data for manipulation and analysis, forming the building blocks of R programming. Variables and data structures (see bellow) can be all referred as \"**R objects**\", and once created, they will appear listed in the Environment tab in the Environments panel (top right).\n\n### Data structures\n\nData structures are more complex objects that are also created using the `<-` operator.\n\n* **Vectors**: The most basic data structure, a vector is a sequence of data elements of the same type (numeric, character, or logical). Created with `c()`, e.g., `c(1, 2, 3)` or `c(\"a\", \"b\", \"c\")`.\n\n* **Matrices**: Two-dimensional, homogeneous data structures (all elements are of the same type). Created using `matrix()`, e.g., `matrix(1:9, nrow = 3, ncol = 3)`.\n\n* **Factor**: A factor is a special case in-between a vector and a matrix, designed to facilitate operations with categorical variables. While a factor will often seem equivalent to a Character vector (e.g., `c(\"Yes\", \"No\", \"Yes\")`), it will be treated as a two column matrix where character values are mapped to a numeric index, assigned arbitrarily. In this *n*x2 matrix, where *n* is the number of rows or elements in each column, each row is referred as \"level\". To create a factor, we must use the primitive function `factor()` and give it a Character vector: e.g., `factor(c(\"Yes\", \"No\", \"Yes\"))`.\n\n* **Data Frames**: Tabular data structures where each column can contain different data types (numeric, character, factor, etc.). Both columns and rows can be named. Data frames are created with `data.frame()`: e.g., `data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))`.\n\n* **Lists**: Collections of elements that can contain different types of data structures, such as vectors, data frames, or even other lists. All list elements can be assigned a specific name. To create a list, use `list()`: e.g., `list(a = 1, b = \"text\", c = TRUE, d = c(1, 2, 3))`.\n\nEach of these data structures supports a range of operations for data manipulation and can be essential in R for organizing and analysing data effectively.\n\n### Arithmetic operations, logical operations in R.  \n\nR supports a range of arithmetic and logical operations:\n\n* *Arithmetic Operations*: Perform basic mathematical operations on numbers (type **Numeric**).\n  * **Addition**: e.g., `5 + 3`\n  * **Subtraction**: e.g., `5 - 3`\n  * **Multiplication**: e.g., `5 * 3`\n  * **Division**: e.g., `5 / 3`\n  * **Exponentiation**: `5 ^ 3`\n  * **Modulus**: `5 %% 3` (remainder)\n\n* *Logical Operations*: Compare values (any type), returning Boolean values (type Logical `TRUE` or `FALSE`).\n  * **Equal to**: e.g., `5 == 3`\n  * **Not equal to**: e.g., `5 != 3`\n  * **Greater than**: e.g., `5 > 3`\n  * **Less than**: e.g., `5 < 3`\n  * Logical **AND**: e.g., `TRUE & FALSE`\n  * Logical **OR**: e.g., `TRUE | FALSE`\n\n### Algorithm declaration\n\nAn algorithm is a step-by-step set of instructions used to solve a problem or perform a task, enabling computers to process data efficiently. Algorithms are normally fixed as re-usable code in the form of functions (or methods, depending on the programming language). These might take (or require) certain **input** variables, named \"arguments\" or \"parameters\", and return certain **output** variables.\n\nIn R, a function can be declared (i.e., created for later use) by using the keyword `funtion()`, which is in itself a function already declared in R by default (i.e., a \"primitive\" function).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_numbers <- function(a, b) {\n  return(a + b)\n}\n```\n:::\n\n\nA function declaration will then prescribe the input variables taken as variable names placed inside a parenthesis and separated by commas (e.g., `funtion(a, b)`) and use the same names inside the function's code, enclosed by curly brackets (e.g., `{ return(a + b) }`). In R, a function's output is always a single R object, enclosed as an argument of another primitive function, `return()` (e.g., `return(a + b)`).\n\nOnce declared, a function will be available or \"loaded in the R session\" for further use, using whatever values we assign to its input variables. For example, when `a = 3` and `b = 5`, `add_numbers()` will return:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- add_numbers(3, 5)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n### *Control flow* structures\n\nIn programming, algorithms are executed through structured pathways known as *control flow structures*, determining the order in which instructions are carried out. Control flow structures include sequence (executing statements in order), selection (using conditions like \"if\" statements), and iteration (looping through repeated instructions). These structures direct the program’s execution path, ensuring it meets the logical requirements of the algorithm and reaches a solution effectively [@noauthor_control_2024; @noauthor_control_2020].\n\nR provides basic control flow structures for implementing algorithms:\n\n* `if` and `else`: Execute code based on a condition.\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\nif (x > 5) {\n  print(\"x is greater than 5\")\n} else {\n  print(\"x is not greater than 5\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is greater than 5\"\n```\n\n\n:::\n:::\n\n* `while` loop: Repeat code while a condition is true.\n\n::: {.cell}\n\n```{.r .cell-code}\ncount <- 1\nwhile (count <= 5) {\n  print(count)\n  count <- count + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\n### Getting help {.unnumbered}\n\nWhile learning R and its extensive *vocabulary*, it is useful to know where to get help. Beyond searching for specific questions online (always a good option), it can be clarifying enough to read the relevant fragment of R documentation.\n\nThere are mainly two ways of accessing R documentation:\n\n* **Console command**: In the R console, type `?` followed by the name of a function (e.g., `?factor`) or a canonical dataset (e.g., `?iris`, see Importing data).\n\n* **RStudio Help tab**: Go the Help tab in the Output area of RStudio's interface (bottom left), and using the search field (top right in Help), type the name of a function or canonical dataset.\n\nThe R documentation entry for a function explains briefly:\n\n* what it does (\"Description\")\n* what arguments it takes (\"Arguments\")\n* what values it outputs (\"Value\")\n* additional information about its behaviour (\"Details\", etc.)\n* related bibliographic references (\"References\")\n* use examples in code (\"Examples\") \n\nNotice that sometimes one documentation entry might be related to an entire group of functions. For example, the entry on `factor()` also refers to `as.factor()` and `is.factor()`, among others.\n\n:::\n\n### Writing and executing R scripts \n\nTo create and run an R script:\n\n1. Go to File > New File > R Script in RStudio.\n\n2. Write your code in the editor. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple R Script\nx <- 5\ny <- 10\nsum <- x + y\nprint(sum)\n```\n:::\n\n\n3. Highlight the code and press Ctrl + Enter (Windows) or Cmd + Enter (Mac) to execute it in the Console.\n\n### Using packages\n\nPackages in R are collections of functions, data, and documentation that extend R’s capabilities. They allow you to perform specialized tasks without having to write code from scratch. To use a package, you need to first install it and then load it into your R session.\n\n#### Installing and loading packages {.unnumbered}\nTo install a package, use the `install.packages()` function. For example, to install the ggplot2 package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nAlternatively, you may use the GUI Wizard in Tools > Install Packages..., where an autocomplete feature will help selecting packages exact names.\n\nOnce installed, load the package with the `library()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nNow you can access the functions within `ggplot2` and any other loaded package. You only need to install a package once, but you must load it in each new session.\n\n#### Package collection: `tidyverse` {.unnumbered}\n\nThe [`tidyverse`](https://www.tidyverse.org/) is a collection of R packages designed for data science, making data manipulation, visualization, and analysis easier and more intuitive [@wickham_welcome_2019; @noauthor_tidyverse_nodate]. It includes:\n\n* `ggplot2`: For creating data visualizations using a layered approach.\n* `dplyr`: For data manipulation, including filtering, summarizing, and arranging data.\n* `tidyr`: For reshaping and tidying data.\n* `readr`: For reading data files into R quickly.\n* `purrr`: For functional programming, allowing you to work with lists and vectors more effectively.\n* `tibble`: A modern version of data frames with enhanced printing and subsetting.\n\nThe installation and use of the entire tidyverse works as a single package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n\nThe tidyverse packages considerably change the way of working with R. Indeed, tidyverse code is now often used for introducing data science in R, since it is much easier to read and learn for beginners. However, it brings with it dependencies (i.e. other packages) and sometimes hide certain potentials that can only be explored with base R. In this course, we try to keep a balanced perspective by offering a glimpse of more than one R code solutions.\n\n#### Package collection: `tesselle` {.unnumbered}\n\nThe [`tesselle`](https://www.tesselle.org/) collection is a suite of R packages specifically designed for teaching archaeological data analysis and modelling. These packages provide tools for handling and analysing spatial and temporal patterns in archaeological datasets, making it easier to derive insights from complex data, particularly count data, compositional data and chronological data [@frerebeau_tesselle_2023; @noauthor_tesselle_nodate].\n\nInstall the complete suite with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tesselle\")\n```\n:::\n\n\nWe will look into more details about this collection in @sec-compositional-data and @sec-count-and-seriation.\n\n## Data Manipulation\n\n### Importing data\n\n#### Reading CSV Files{.unnumbered}\n\nTo read data from a CSV file, use the `read.csv()` or `read_csv()` function from the `readr` package. The `read.csv()` function is part of base R and handles typical CSV formats, while `read_csv()` is optimized for speed and flexibility in handling larger files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R\ndata <- read.csv(\"path/to/file.csv\")\n\n# Using readr package (installation required)\nlibrary(readr)\ndata <- read_csv(\"path/to/file.csv\")\n```\n:::\n\n\n#### Writing CSV Files {.unnumbered}\n\nTo save your data as a CSV file, use the `write.csv()` or `write_csv()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R\nwrite.csv(data, \"path/to/output.csv\")\n\n# Using readr package\nwrite_csv(data, \"path/to/output.csv\")\n```\n:::\n\n\n#### Using Canonical Datasets {.unnumbered}\n\nR includes several built-in or \"canonical\" datasets, like `iris`, useful for having a common benchmark for testing and giving examples. Other canonical datasets are available inside packages dedicated specialized fields, like `archdata` containing several archaeological datasets. To load a canonical dataset, use `data()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the built-in iris dataset\ndata(iris)\n\n# Load the DartPoints dataset from the archdata package\nlibrary(archdata)\ndata(\"DartPoints\")\n```\n:::\n\n\nAs long as the dataset is from base R, we can skip the loading step and use the dataset directly in an operation by using its name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find out how many columns the iris dataset have \nncol(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n### Basic operations on data structures\n\n#### Adding/Removing Elements {.unnumbered}\n\n- **Adding Elements**: Use functions like `cbind()` for columns and `rbind()` for rows to add elements to data frames and matrices.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Adding a column\n  df <- data.frame(x = 1:3, y = 4:6)\n  df$z <- 7:9  # Adding column using $\n  \n  # Adding a row\n  new_row <- data.frame(x = 4, y = 7, z = 10)\n  df <- rbind(df, new_row)\n  ```\n  :::\n\n\n- **Removing Elements**: Use `NULL` assignment or `subset()` to remove columns or rows.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Removing a column\n  df$z <- NULL\n  \n  # Removing rows by index\n  df <- df[-c(1, 2), ]\n  ```\n  :::\n\n\n#### Indexing {.unnumbered}\n\n1. **Numeric Indexing**: Access elements by specifying their position.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df[1, 2]  # First row, second column\n   df[1:3, ]  # First three rows, all columns\n   ```\n   :::\n\n\n2. **Logical Indexing**: Filter based on logical conditions.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df[df$y > 5, ]  # Rows where column y > 5\n   ```\n   :::\n\n\n3. **Column Selection**: Access columns by `$` (column name) or numeric index.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df$x  # Access column by name\n   df[, 1]  # Access first column by index\n   ```\n   :::\n\n\n4. **Row Selection**: Filter rows with conditions.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df[1:2, ]  # First two rows\n   df[df$x > 2, ]  # Rows where column x > 2\n   ```\n   :::\n\n\n5. **Combining Indexing**: Combine row and column filters for specific elements.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df[1:2, c(\"x\", \"y\")]  # First two rows, columns x and y\n   ```\n   :::\n\n\n#### Subsetting (`subset`) {.unnumbered}\n\n- The `subset()` function provides an easy way to filter data by specifying conditions.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  subset(df, x > 2 & y < 6)  # Filter rows where x > 2 and y < 6\n  ```\n  :::\n\n\n#### Joining or Merging (`merge`) {.unnumbered}\n\n- Use `merge()` to combine two data frames based on a common key or column.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  df1 <- data.frame(id = 1:3, x = c(\"A\", \"B\", \"C\"))\n  df2 <- data.frame(id = 2:4, y = c(\"D\", \"E\", \"F\"))\n  merged_df <- merge(df1, df2, by = \"id\")\n  ```\n  :::\n\n\n#### Modifying Elements with Functions (`apply`) {.unnumbered}\n\n- The `apply()` function allows operations across rows or columns of a data frame or matrix.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Summing across rows (1 indicates rows)\n  apply(df[, 1:2], 1, sum)\n  \n  # Summing across columns (2 indicates columns)\n  apply(df[, 1:2], 2, sum)\n  ```\n  :::\n\n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\n* @noauthor_indexing_nodate  \n* @phillips_yarrr_nodate  \n* @noauthor_indexing_2022  \n* @noauthor_subsetting_nodate  \n* @noauthor_indexing_nodate-1  \n\n:::\n\n### Using `dplyr` Package\n\nThe `dplyr` package in R provides a suite of functions to manipulate data in a streamlined and readable way. Key functions include those for filtering, selecting, and mutating data, which help manage data subsets, reorganize columns, and create new variables.\n\n1. **Filtering Data**\n   - Use `filter()` to select rows based on conditions. Multiple conditions can be combined with `&` (and) or `|` (or).\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   library(dplyr)\n   filtered_data <- df %>% filter(column1 > 10, column2 == \"A\")\n   ```\n   :::\n\n\n2. **Selecting Columns**\n   - Use `select()` to choose specific columns by name. You can use `:` to select a range of columns or `-` to exclude columns.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   selected_data <- df %>% select(column1, column2)\n   selected_data <- df %>% select(-column3)  # Exclude column3\n   ```\n   :::\n\n\n3. **Mutating Data**\n   - The `mutate()` function creates new columns or modifies existing ones by performing calculations or transformations on current columns.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   df <- df %>% mutate(new_column = column1 * 2)\n   ```\n   :::\n\n\nThese functions are especially powerful when combined in recursive structures or \"pipelines\" using `%>%` to streamline data manipulation tasks.\n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\n* @noauthor_grammar_nodate  \n* @noauthor_data_nodate  \n* @noauthor_aggregating_nodate  \n* @noauthor_dplyr_2020  \n* @bhalla_dplyr_nodate  \n\n:::\n\n## Data Visualization\n\nLet us load the `DartPoints` dataset from the `archdata` package and use it in the examples:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(archdata)\ndata(DartPoints)\n```\n:::\n\n\n### Creating Plots in R with Base R Graphics\nBase R provides quick ways to create plots using functions like `plot()`, `hist()`, `barplot()`, and `boxplot()`.\n\n1. **Histograms**: Display the distribution of a single continuous variable.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   hist(DartPoints$Length, main = \"Histogram of Dart Points Length\", xlab = \"Maximum Length (mm)\")\n   ```\n   \n   ::: {.cell-output-display}\n   ![](session-r-introduction_files/figure-html/unnamed-chunk-31-1.svg)\n   :::\n   :::\n\n\n2. **Bar plots**: Used for categorical data to show the frequency or count for each category.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   barplot(table(DartPoints$Blade.Sh), main = \"Bar Plot of Blade Shape\", xlab = \"Blade Shape categories\", names.arg = c(\"Excurvate\", \"Incurvate\", \"Recurvate\", \"Straight\"))\n   ```\n   \n   ::: {.cell-output-display}\n   ![](session-r-introduction_files/figure-html/unnamed-chunk-32-1.svg)\n   :::\n   :::\n\n\n3. **Box plots**: Visualize the relationship between one continuous variable and one categorical variable.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   boxplot(Length ~ Blade.Sh, DartPoints, main = \"Box Plot of Length vs Blade Shape\", xlab = \"Blade Shape categories\", ylab = \"Maximum Length (mm)\", names = c(\"Excurvate\", \"Incurvate\", \"Recurvate\", \"Straight\"))\n   ```\n   \n   ::: {.cell-output-display}\n   ![](session-r-introduction_files/figure-html/unnamed-chunk-33-1.svg)\n   :::\n   :::\n\n   \n4. **Scatter plots**: Visualize the relationship between two continuous variables.\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   plot(DartPoints$Width, DartPoints$Length, main = \"Scatter Plot of Length vs Width\", xlab = \"Maximum Width (mm)\", ylab = \"Maximum Length (mm)\")\n   ```\n   \n   ::: {.cell-output-display}\n   ![](session-r-introduction_files/figure-html/unnamed-chunk-34-1.svg)\n   :::\n   :::\n\n\nIt is possible to customise the graphics much further, for example, by colouring (`col` argument) or using different point shapes (`pch` argument) in scatter plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(DartPoints$Width, DartPoints$Length, \n     col = DartPoints$Blade.Sh, # use factor as it is, plot() will convert it into colours\n     pch = as.numeric(DartPoints$Blade.Sh), # use factor index as code for symbols\n     main = \"Scatter Plot of Length vs Width\", \n     xlab = \"Maximum Width (mm)\", ylab = \"Maximum Length (mm)\")\n```\n\n::: {.cell-output-display}\n![](session-r-introduction_files/figure-html/unnamed-chunk-35-1.svg)\n:::\n:::\n\n\n### Creating Multiple Plot Figures with `layout`\n- Use `layout()` to organize multiple plots in a single window.\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  layout(matrix(1:2, nrow = 1))\n  hist(DartPoints$Length, main = \"Plot 1: histogram\", xlab = \"Maximum Length (mm)\")\n  boxplot(DartPoints$Length, main = \"Plot 2: boxplot\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-36-1.svg)\n  :::\n  :::\n\n  With the right combination of additional arguments, we are able to produce customised layouts for a combined plot:\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  layout(matrix(1:2, nrow = 2))\n  par(mar = c(0.1, 5, 1, 1))\n  hist(DartPoints$Length, xaxt='n', main = \"Distribution of Maximum Length in the DartPoints dataset\", xlab = \"\", ylab = \"Frequency\")\n  par(mar = c(5, 5, 0.1, 1))\n  boxplot(DartPoints$Length, horizontal = TRUE, xlab = \"Maximum Length (mm)\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-37-1.svg)\n  :::\n  :::\n\n\n### Creating Plots in `ggplot2`\n\n`ggplot2` is an extensive package for creating complex and aesthetically pleasing graphics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nHere are a few examples using `ggplot2`:\n\n- **Histograms**:\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(DartPoints, aes(x = Length)) + \n    geom_histogram() +\n    labs(title = \"Histogram of Dart Points Length\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-39-1.svg)\n  :::\n  :::\n\n   \n- **Bar plots**:\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(DartPoints, aes(x = Blade.Sh)) + \n    geom_bar() +\n    scale_x_discrete(labels = c(\"Excurvate\", \"Incurvate\", \"Recurvate\", \"Straight\")) + \n    labs(title = \"Bar plot of Blade Shape\", x = \"Blade Shape categories\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-40-1.svg)\n  :::\n  :::\n\n\n- **Box plots**:\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(DartPoints, aes(x = Blade.Sh, y = Length)) +\n    geom_boxplot() +\n    scale_x_discrete(labels = c(\"Excurvate\", \"Incurvate\", \"Recurvate\", \"Straight\")) + \n    labs(title = \"Box Plot of Length vs Blade Shape\", x = \"Blade Shape categories\", y = \"Maximum Length (mm)\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-41-1.svg)\n  :::\n  :::\n\n  \n- **Scatter plots**:\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(DartPoints, aes(x = Width, y = Length)) +\n    geom_point() +\n    labs(title = \"Length vs Width\")\n  ```\n  \n  ::: {.cell-output-display}\n  ![](session-r-introduction_files/figure-html/unnamed-chunk-42-1.svg)\n  :::\n  :::\n\n\nAs base R, `ggplot2` also allow customising graphics. Replicating the same example, we add colors and shape matching a categorical variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DartPoints, aes(x = Width, y = Length, \n                       color = Blade.Sh, # use factor as it is, ggplot() will convert it into colours\n                       shape = Blade.Sh)) + # use factor as it is, ggplot() will convert it into shapes\n  geom_point() +\n  labs(title = \"Length vs Width by Blade Shape\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](session-r-introduction_files/figure-html/unnamed-chunk-43-1.svg)\n:::\n:::\n\n\n### Creating Multiple Plot Figures with `gridExtra::grid.arrange`\n\n`gridExtra::grid.arrange()` allows for multiple `ggplot2` plots in one layout.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\np1 <- ggplot(DartPoints, aes(x = Length)) + geom_histogram()\np2 <- ggplot(DartPoints, aes(x = factor(Blade.Sh))) + geom_bar() + xlab(\"Blade Shape categories\")\ngrid.arrange(p1, p2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](session-r-introduction_files/figure-html/unnamed-chunk-44-1.svg)\n:::\n:::\n\n\n### Base R Graphics and `ggplot2`: Comparative\n\n**Base R** is quick and requires less setup, ideal for simple exploratory analysis. It offers a more robust and flexible framework for building complex custom plots, containing multiple plot types and separated R objects.  \n\n**ggplot2** provides a grammar of graphics, which is more powerful and customizable for detailed visualizations. In general, it produces more attractive plots for public display and it is the best choice whenever the goal to produce a standard plot from a single dataset. \n\n### Saving Plots: Opening and Closing Graphic Devices in R\n\nUse `png()`, `pdf()`, etc., to open graphic devices, giving at least the path and file name as argument, and `dev.off()` to close the device. After execution, the corresponding file will be created at the specified directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(\"myPlots/plot.png\")\nplot(mtcars$mpg, mtcars$wt)\ndev.off()\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\n* @engel_data_nodate  \n* @noauthor_function_nodate  \n* @holtz_data_nodate  \n* @kabacoff_modern_nodate  \n* @holtz_r_nodate  \n* @qin_research_nodate  \n* @healy_data_nodate  \n\n:::\n\n## Interactive Visualizations\n\n### Introduction to Creating Interactive Visualizations\n\nInteractive visualizations enhance data exploration by allowing users to zoom, pan, hover, and filter elements in a plot. In R, libraries like `plotly` integrate with `ggplot2` and base graphics to turn static plots into interactive ones. The `plotly` package is particularly useful for creating dashboards and presentations, as it enables seamless transitions between static and interactive graphs.\n\n### Example: Building an Interactive Plot using `plotly` and `knitr`\n\nWith `plotly` and `knitr` in R Markdown, you can embed interactive plots directly in a report.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries\nlibrary(plotly)\nlibrary(knitr)\n\n# Change Blade.Sh levels to a full text form\nDartPoints$Blade.Sh <- factor(DartPoints$Blade.Sh,\n                              levels = c(\"E\", \"I\", \"R\", \"S\"),\n                              labels = c(\"Excurvate\", \"Incurvate\", \"Recurvate\", \"Straight\"))\n\n# Create a basic ggplot2 scatter plot\np <- ggplot(DartPoints, aes(x = Width, y = Length, color = Blade.Sh)) +\n  geom_point(size = 2) +\n  labs(title = \"Length vs Width by Blade Shape\", color = \"Blade Shape\")\n\n# Convert ggplot2 object to plotly\ninteractive_plot <- ggplotly(p)\n\n# Display the interactive plot\ninteractive_plot\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-568056d60a78a8cd631d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-568056d60a78a8cd631d\">{\"x\":{\"data\":[{\"x\":[18.699999999999999,17.5,15.800000000000001,14.5,14.6,16.600000000000001,16.699999999999999,16.5,16.300000000000001,17.399999999999999,20.300000000000001,19.199999999999999,20.399999999999999,20.300000000000001,21,25.100000000000001,21.399999999999999,27.800000000000001,27.199999999999999,28.5,22.800000000000001,27.300000000000001,21.199999999999999,26.899999999999999,28.100000000000001,26.899999999999999,29.600000000000001,25.199999999999999,30.399999999999999,27.199999999999999,22,26.800000000000001,21.100000000000001,22.399999999999999,21.300000000000001,18.899999999999999,21.399999999999999,21.5,20.899999999999999,29.600000000000001,24.399999999999999,19.300000000000001],\"y\":[48.5,47.700000000000003,33.600000000000001,32.399999999999999,42.200000000000003,33.5,41.799999999999997,38,35.5,33.100000000000001,47.600000000000001,42.299999999999997,38.299999999999997,50.600000000000001,54.200000000000003,42.100000000000001,34.899999999999999,53.5,66,64.5,59,55.299999999999997,84,48,78.299999999999997,57.200000000000003,52,61.100000000000001,70.400000000000006,64.099999999999994,55,44.799999999999997,56.5,54.600000000000001,46.299999999999997,57.600000000000001,49.100000000000001,64.599999999999994,69,53.100000000000001,58.899999999999999,55.399999999999999],\"text\":[\"Width: 18.7<br />Length:  48.5<br />Blade.Sh: Excurvate\",\"Width: 17.5<br />Length:  47.7<br />Blade.Sh: Excurvate\",\"Width: 15.8<br />Length:  33.6<br />Blade.Sh: Excurvate\",\"Width: 14.5<br />Length:  32.4<br />Blade.Sh: Excurvate\",\"Width: 14.6<br />Length:  42.2<br />Blade.Sh: Excurvate\",\"Width: 16.6<br />Length:  33.5<br />Blade.Sh: Excurvate\",\"Width: 16.7<br />Length:  41.8<br />Blade.Sh: Excurvate\",\"Width: 16.5<br />Length:  38.0<br />Blade.Sh: Excurvate\",\"Width: 16.3<br />Length:  35.5<br />Blade.Sh: Excurvate\",\"Width: 17.4<br />Length:  33.1<br />Blade.Sh: Excurvate\",\"Width: 20.3<br />Length:  47.6<br />Blade.Sh: Excurvate\",\"Width: 19.2<br />Length:  42.3<br />Blade.Sh: Excurvate\",\"Width: 20.4<br />Length:  38.3<br />Blade.Sh: Excurvate\",\"Width: 20.3<br />Length:  50.6<br />Blade.Sh: Excurvate\",\"Width: 21.0<br />Length:  54.2<br />Blade.Sh: Excurvate\",\"Width: 25.1<br />Length:  42.1<br />Blade.Sh: Excurvate\",\"Width: 21.4<br />Length:  34.9<br />Blade.Sh: Excurvate\",\"Width: 27.8<br />Length:  53.5<br />Blade.Sh: Excurvate\",\"Width: 27.2<br />Length:  66.0<br />Blade.Sh: Excurvate\",\"Width: 28.5<br />Length:  64.5<br />Blade.Sh: Excurvate\",\"Width: 22.8<br />Length:  59.0<br />Blade.Sh: Excurvate\",\"Width: 27.3<br />Length:  55.3<br />Blade.Sh: Excurvate\",\"Width: 21.2<br />Length:  84.0<br />Blade.Sh: Excurvate\",\"Width: 26.9<br />Length:  48.0<br />Blade.Sh: Excurvate\",\"Width: 28.1<br />Length:  78.3<br />Blade.Sh: Excurvate\",\"Width: 26.9<br />Length:  57.2<br />Blade.Sh: Excurvate\",\"Width: 29.6<br />Length:  52.0<br />Blade.Sh: Excurvate\",\"Width: 25.2<br />Length:  61.1<br />Blade.Sh: Excurvate\",\"Width: 30.4<br />Length:  70.4<br />Blade.Sh: Excurvate\",\"Width: 27.2<br />Length:  64.1<br />Blade.Sh: Excurvate\",\"Width: 22.0<br />Length:  55.0<br />Blade.Sh: Excurvate\",\"Width: 26.8<br />Length:  44.8<br />Blade.Sh: Excurvate\",\"Width: 21.1<br />Length:  56.5<br />Blade.Sh: Excurvate\",\"Width: 22.4<br />Length:  54.6<br />Blade.Sh: Excurvate\",\"Width: 21.3<br />Length:  46.3<br />Blade.Sh: Excurvate\",\"Width: 18.9<br />Length:  57.6<br />Blade.Sh: Excurvate\",\"Width: 21.4<br />Length:  49.1<br />Blade.Sh: Excurvate\",\"Width: 21.5<br />Length:  64.6<br />Blade.Sh: Excurvate\",\"Width: 20.9<br />Length:  69.0<br />Blade.Sh: Excurvate\",\"Width: 29.6<br />Length:  53.1<br />Blade.Sh: Excurvate\",\"Width: 24.4<br />Length:  58.9<br />Blade.Sh: Excurvate\",\"Width: 19.3<br />Length:  55.4<br />Blade.Sh: Excurvate\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(248,118,109,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(248,118,109,1)\"}},\"hoveron\":\"points\",\"name\":\"Excurvate\",\"legendgroup\":\"Excurvate\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[20.699999999999999,15.9,17.5,22.800000000000001],\"y\":[40.299999999999997,34.5,38,45.200000000000003],\"text\":[\"Width: 20.7<br />Length:  40.3<br />Blade.Sh: Incurvate\",\"Width: 15.9<br />Length:  34.5<br />Blade.Sh: Incurvate\",\"Width: 17.5<br />Length:  38.0<br />Blade.Sh: Incurvate\",\"Width: 22.8<br />Length:  45.2<br />Blade.Sh: Incurvate\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(124,174,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(124,174,0,1)\"}},\"hoveron\":\"points\",\"name\":\"Incurvate\",\"legendgroup\":\"Incurvate\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[27.899999999999999,20.899999999999999,27.100000000000001],\"y\":[60,48.100000000000001,67.200000000000003],\"text\":[\"Width: 27.9<br />Length:  60.0<br />Blade.Sh: Recurvate\",\"Width: 20.9<br />Length:  48.1<br />Blade.Sh: Recurvate\",\"Width: 27.1<br />Length:  67.2<br />Blade.Sh: Recurvate\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,191,196,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,191,196,1)\"}},\"hoveron\":\"points\",\"name\":\"Recurvate\",\"legendgroup\":\"Recurvate\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[15.800000000000001,17.399999999999999,16.300000000000001,16.100000000000001,17.100000000000001,16.800000000000001,15.6,16,19.800000000000001,23.300000000000001,20.100000000000001,20.800000000000001,20,21.800000000000001,22.5,18.600000000000001,49.299999999999997,31.699999999999999,25.300000000000001,21,23.100000000000001,24.399999999999999,24.300000000000001,22.600000000000001,20.899999999999999,31.600000000000001,18.5,28.100000000000001,25.800000000000001,18.399999999999999,19.199999999999999,17.899999999999999,21.5,19.699999999999999,22.600000000000001,26,25.100000000000001,18.899999999999999,21.100000000000001,24.699999999999999],\"y\":[42.799999999999997,40.5,37.5,40.299999999999997,30.600000000000001,41.799999999999997,31.199999999999999,32,38.100000000000001,44.200000000000003,43.5,42.100000000000001,43.100000000000001,37.5,55.200000000000003,42.5,109.5,59.799999999999997,52.799999999999997,43.700000000000003,43.200000000000003,49,46.399999999999999,56.200000000000003,47.100000000000001,65,35.399999999999999,61.299999999999997,49.100000000000001,40.100000000000001,41.5,46.299999999999997,39.600000000000001,41.200000000000003,45,54.200000000000003,65.400000000000006,45.799999999999997,49.100000000000001,63.100000000000001],\"text\":[\"Width: 15.8<br />Length:  42.8<br />Blade.Sh: Straight\",\"Width: 17.4<br />Length:  40.5<br />Blade.Sh: Straight\",\"Width: 16.3<br />Length:  37.5<br />Blade.Sh: Straight\",\"Width: 16.1<br />Length:  40.3<br />Blade.Sh: Straight\",\"Width: 17.1<br />Length:  30.6<br />Blade.Sh: Straight\",\"Width: 16.8<br />Length:  41.8<br />Blade.Sh: Straight\",\"Width: 15.6<br />Length:  31.2<br />Blade.Sh: Straight\",\"Width: 16.0<br />Length:  32.0<br />Blade.Sh: Straight\",\"Width: 19.8<br />Length:  38.1<br />Blade.Sh: Straight\",\"Width: 23.3<br />Length:  44.2<br />Blade.Sh: Straight\",\"Width: 20.1<br />Length:  43.5<br />Blade.Sh: Straight\",\"Width: 20.8<br />Length:  42.1<br />Blade.Sh: Straight\",\"Width: 20.0<br />Length:  43.1<br />Blade.Sh: Straight\",\"Width: 21.8<br />Length:  37.5<br />Blade.Sh: Straight\",\"Width: 22.5<br />Length:  55.2<br />Blade.Sh: Straight\",\"Width: 18.6<br />Length:  42.5<br />Blade.Sh: Straight\",\"Width: 49.3<br />Length: 109.5<br />Blade.Sh: Straight\",\"Width: 31.7<br />Length:  59.8<br />Blade.Sh: Straight\",\"Width: 25.3<br />Length:  52.8<br />Blade.Sh: Straight\",\"Width: 21.0<br />Length:  43.7<br />Blade.Sh: Straight\",\"Width: 23.1<br />Length:  43.2<br />Blade.Sh: Straight\",\"Width: 24.4<br />Length:  49.0<br />Blade.Sh: Straight\",\"Width: 24.3<br />Length:  46.4<br />Blade.Sh: Straight\",\"Width: 22.6<br />Length:  56.2<br />Blade.Sh: Straight\",\"Width: 20.9<br />Length:  47.1<br />Blade.Sh: Straight\",\"Width: 31.6<br />Length:  65.0<br />Blade.Sh: Straight\",\"Width: 18.5<br />Length:  35.4<br />Blade.Sh: Straight\",\"Width: 28.1<br />Length:  61.3<br />Blade.Sh: Straight\",\"Width: 25.8<br />Length:  49.1<br />Blade.Sh: Straight\",\"Width: 18.4<br />Length:  40.1<br />Blade.Sh: Straight\",\"Width: 19.2<br />Length:  41.5<br />Blade.Sh: Straight\",\"Width: 17.9<br />Length:  46.3<br />Blade.Sh: Straight\",\"Width: 21.5<br />Length:  39.6<br />Blade.Sh: Straight\",\"Width: 19.7<br />Length:  41.2<br />Blade.Sh: Straight\",\"Width: 22.6<br />Length:  45.0<br />Blade.Sh: Straight\",\"Width: 26.0<br />Length:  54.2<br />Blade.Sh: Straight\",\"Width: 25.1<br />Length:  65.4<br />Blade.Sh: Straight\",\"Width: 18.9<br />Length:  45.8<br />Blade.Sh: Straight\",\"Width: 21.1<br />Length:  49.1<br />Blade.Sh: Straight\",\"Width: 24.7<br />Length:  63.1<br />Blade.Sh: Straight\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(199,124,255,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(199,124,255,1)\"}},\"hoveron\":\"points\",\"name\":\"Straight\",\"legendgroup\":\"Straight\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[18.199999999999999,27.300000000000001],\"y\":[40,48.5],\"text\":[\"Width: 18.2<br />Length:  40.0<br />Blade.Sh: NA\",\"Width: 27.3<br />Length:  48.5<br />Blade.Sh: NA\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(127,127,127,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(127,127,127,1)\"}},\"hoveron\":\"points\",\"name\":\"NA\",\"legendgroup\":\"NA\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.762557077625573,\"r\":7.3059360730593621,\"b\":40.182648401826498,\"l\":43.105022831050235},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Length vs Width by Blade Shape\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[12.76,51.039999999999999],\"tickmode\":\"array\",\"ticktext\":[\"20\",\"30\",\"40\",\"50\"],\"tickvals\":[20,30,40,50],\"categoryorder\":\"array\",\"categoryarray\":[\"20\",\"30\",\"40\",\"50\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Width\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[26.655000000000001,113.44499999999999],\"tickmode\":\"array\",\"ticktext\":[\"30\",\"50\",\"70\",\"90\",\"110\"],\"tickvals\":[30,50,70,90,110],\"categoryorder\":\"array\",\"categoryarray\":[\"30\",\"50\",\"70\",\"90\",\"110\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Length\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Blade Shape\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"311c31185bb3\":{\"x\":{},\"y\":{},\"colour\":{},\"type\":\"scatter\"}},\"cur_data\":\"311c31185bb3\",\"visdat\":{\"311c31185bb3\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nThis example takes a `ggplot2` scatter plot and transforms it into an interactive visualization with `plotly`. You can embed this code in an R Markdown document to generate a shareable, interactive HTML report.\n\n::: {.callout-note collapse=\"true\"}\n#### See also {.unnumbered}\n\n* @engel_chapter_nodate  \n* @meo_creating_2023 \n* @collins_how_2020  \n* @majumder_guide_2021  \n* @nhs-r_community_plotting_2021\n\n:::\n\n::: {.callout-note icon=false}\n## Hands-on Practice {.unnumbered}\n\n* Create a **new project** in RStudio, placing it at the root directory of your own repository (cloned local branch). Inside, create a \"data\" and a \"plots\" subdirectories (i.e. folders).\n\n* Create a **Rmarkdown document** and give it a title, e.g. \"Introduction to R: an exercise\".\n\n* In this document, create a **R code chunk** to start working and create new chunks and markdown commentaries at every computation step, as you see fit.\n\n* Create a **data frame** named “stone\\_tools\\_data” directly in R (i.e. constructed by typing vectors and joining them by code) with the following characteristics (based on Carlson 2017, p. 26):  \n  * Set of **six** stone tools with inventory number  \n  * Variables or columns: recording of dimensions (length, breadth, thickness), material type, and whether the material is local or non-local.  \n  * Data per object:  \n    * LN15:  \n      * Length: 18  \n      * Breadth: 9  \n      * Thickness: 3  \n      * Material type: chert  \n      * Material provenance: local  \n    * LN17:  \n      * Length: 14  \n      * Breadth: 7  \n      * Thickness: 2  \n      * Material type: chert  \n      * Material provenance: local  \n    * LN18:  \n      * Length: 21  \n      * Breadth: 10  \n      * Thickness: 3  \n      * Material type: obsidian  \n      * Material provenance: local  \n    * LN21:  \n      * Length: 14  \n      * Breadth: 7  \n      * Thickness: 3  \n      * Material type: chert  \n      * Material provenance: non-local  \n    * LN23:  \n      * Length: 17  \n      * Breadth: 8  \n      * Thickness: 3  \n      * Material type: obsidian  \n      * Material provenance: local  \n    * LN24:  \n      * Length: 16  \n      * Breadth: 8  \n      * Thickness: 2  \n      * Material type: obsidian  \n      * Material provenance: non-local  \n\n* Check that the data and data types are coherent with the specifications. Save it as a CSV file (stored in a \"data\" subdirectory) and load it back as a new R object (e.g. “stone\\_tools\\_data2”). Compare.  \n\n* Create a plot showing the counts of objects made of chert and obsidian. Save it as a PNG file in \"plots\" subdirectory.  \n\n* Create a new variable (“type\\_and\\_provenance”) that combines type and provenance and create a plot showing the counts in each category. Save it as a PNG file in \"plots\" subdirectory.  \n\n* Create a single figure displaying the variable distribution of the three dimensions measured. Save it as both a PNG and a SVG file in \"plots\" subdirectory.  \n\n* Create a plot displaying the relationship between length and breadth. Save it as a PNG file in \"plots\" subdirectory.  \n\n* Create a plot displaying the relationship between length and breadth, this time marking (point type, colour) objects by their “type\\_and\\_provenance”. Save it as both a PNG and a EPS file in \"plots\" subdirectory.  \n\n* (EXTRA) Create a figure to help explore the question: Do stone tools of different material and provenance tend to be of different size?  \n\n* (EXTRA) Duplicate the Rmarkdown document and add \"_tidyverse\" to the file name. Inside, replicate all steps and  using `tidyverse` and `ggplot` functions.\n\n* Commit all changes and push to the remote using RStudio (use the buttons in the Git tab in the \"Environments\" panel on the top right).  \n\n* Q\\&A and troubleshooting.\n\n:::\n",
    "supporting": [
      "session-r-introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}