[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Management and Digital Archaeology",
    "section": "",
    "text": "Course overview\n040468 Datenmanagement und digitale Archäologie (ÜB, unterrichtet in Englisch) Übungen (3 CP)\nTime slot / Zeitfenster: Fr 14-16 Uhr c.t.\nPlace / Ort: Raum 2\nCourse instructors / Kursleiter: Andreas Angourakis / Tim Klingenberg\nSupport / Unterstützung: Thomas Rose",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-schedulekursplan",
    "href": "index.html#course-schedulekursplan",
    "title": "Data Management and Digital Archaeology",
    "section": "Course schedule/Kursplan:",
    "text": "Course schedule/Kursplan:\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nGetting started\n\n\n1\n2024-10-18\nData and research data management\n\n\n2\n2024-10-25\nGit and GitHub\n\n\nProgramming in R\n\n\n3\n2024-11-08\nIntroduction to R\n\n\n4\n2024-11-15\nBest practices in programming\n\n\nData Science in R\n\n\n5\n2024-11-22\nData Science Workflow\n\n\n6\n2024-11-29\nCount data and seriation\n\n\n7\n2024-12-06\nCompositional data\n\n\nDatabases\n\n\n8\n2024-12-13\nDatabases (I)\n\n\n9\n2024-12-20\nDatabases (II)\n\n\nGIS\n\n\n10\n2025-01-10\nGIS (I)\n\n\n11\n2025-01-17\nGIS (II)",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#evaluation-kursbewertung",
    "href": "index.html#evaluation-kursbewertung",
    "title": "Data Management and Digital Archaeology",
    "section": "Evaluation / Kursbewertung",
    "text": "Evaluation / Kursbewertung\n(Attendance and final examination)",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Data Management and Digital Archaeology",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThe conception of the course structure, as well as the short summaries, exercises, and images shown in each chapter, greatly benefited from Large Language Models used as companion writer and programmer. As such, we own greatly to the current richness of reference information freely available on Internet.\nThe models and services used are:\n\nChatGPT (GPT-4o) by OpenAI for brainstorming, text and code writing suggestions, collection and articulation of references.\nWebChatGPT, a free browser extension that enhances ChatGPT by providing Internet access directly within the chat interface, used to aid Internet search.\nLeonardo.ai (user tokens) for generating purely aesthetic visual assets.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "session-rdm.html",
    "href": "session-rdm.html",
    "title": "1  Data and research data management",
    "section": "",
    "text": "1.1 Introduction to Research Data",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and research data management</span>"
    ]
  },
  {
    "objectID": "session-rdm.html#introduction-to-research-data",
    "href": "session-rdm.html#introduction-to-research-data",
    "title": "1  Data and research data management",
    "section": "",
    "text": "1.1.1 What is data? What is it for?\nData refers to factual information, often in quantitative or qualitative form, used as a basis for reasoning, discussion, or calculation. It serves as the foundational element for analysis and supports decision-making across diverse fields. In research, data helps to generate new insights, verify hypotheses, and contribute to the overall body of knowledge in a specific area.\n\n\n1.1.2 Archaeological Data: Particularities\nIn archaeology, data encompasses various types such as field notes, artefacts, images, geospatial coordinates, and more. By systematically collecting, organizing, and analysing this data, researchers can reconstruct past human behaviours, understand environmental contexts, and explore cultural practices.\nArchaeological data is unique due to its diverse formats and the complexity of its collection. It often includes material remains like pottery, bones, tools, and structures, as well as environmental data like pollen samples and soil types. Since archaeological data often comes from excavation sites, it is usually non-renewable; once excavated, a site cannot be restored to its original state.\nArchaeologists rely heavily on careful documentation to preserve as much information as possible for future study. Furthermore, the context in which artefacts are found is crucial, as it helps interpret their use, significance, and the broader cultural setting.\n\n\n1.1.3 Open Science\nOpen Science promotes transparency and collaboration in research by making methodologies, data, and findings accessible to the public and other researchers. In archaeology, this can involve sharing excavation reports, datasets, and analysis methods to facilitate wider understanding and scrutiny of findings.\n\n\n1.1.4 FAIR Principles\nFAIR stands for Findable, Accessible, Interoperable, and Reusable (“What Is FAIR?” n.d.) and applies to data, metadata, and supporting infrastructure to ensure data is systematically organized and readily available for ongoing use and analysis.\n\n\n\n\n\n\nWhat is metadata?\n\n\n\n\n\nMetadata refers to data that provides information about other data, rather than the content of the data itself. It describes various attributes such as the structure, format, location, and context of the data (“Metadata” 2024; Editor n.d.). Examples include creation dates, file sizes, authorship details, and keywords, which help in organizing, understanding, and retrieving the associated data (“What Is Metadata and How Does It Work?” n.d.).\n\nExample:\n\n\n\nData: identification number, site of origin, and dates of items of a museum exhibition.\n\nMetadata: title and description of this data, author(s), date of last update, criteria for fixing site of origin, method(s) for establishing dates.\n\n\n\nNotice that, in this case, we could also choose to specify the information about dating method into the dataset, as long as we want or can specify this information for each item independently.\n\n\n\n\nA short breakdown of the concepts behind FAIR:\n\nFindable: Data should be easy to locate for humans and machines. This includes having:\n\nA unique and persistent identifier.\nDescriptive metadata.\nMetadata containing data identifiers.\nRegistration in searchable resources.\n\nAccessible: Once found, data should be easy to access. This includes:\n\nRetrieval via a standardized, open protocol.\nSupport for authentication and authorization when necessary.\nAvailability of metadata even if data itself is no longer available.\n\nInteroperable: Data should integrate with other data and tools. This requires:\n\nUsing a standardized, accessible language for data representation.\nUsing FAIR-aligned vocabularies.\nIncluding references to related data.\n\nReusable: Data should be well-described for reuse and replication in various contexts. This involves:\n\nDetailed, relevant metadata.\nClear data usage licensing.\nDocumentation of data provenance.\nConformance to community standards.\n\n\nThese principles aim to enhance the usefulness of digital assets by ensuring they can be easily located, understood, and utilized by others (Lamprecht et al. 2020; Wilkinson et al. 2016). Applying FAIR principles in archaeology involves creating well-documented, open-access datasets that other researchers can readily use (Hiebel et al. 2021; Lien-Talks 2024; Nicholson et al. 2023).\n\n\n\nA summary breakdown of the FAIR data principles (reproduction from Lien-Talks (2024), Figure 1)\n\n\n\n\n1.1.5 Open Source\nOpen Source refers to software and tools that are freely available for anyone to use, modify, and distribute. For archaeologists, open-source tools can offer affordable solutions for data analysis, visualization, and data management, promoting a more inclusive research environment.\n\n\n1.1.6 Reproducibility\nReproducibility refers to the ability to replicate the results of a study using the original author’s assets or following their methodology. It ensures that findings can be independently verified under similar conditions, reinforcing the reliability of scientific research (National Academies of Sciences et al. 2019).\nIn scientific research, reproducibility is crucial for confirming the validity of experimental findings and building upon existing knowledge. It enhances transparency and trustworthiness in scientific practices, promoting better peer review and collaboration “GRN · German Reproducibility Network” (n.d.).\nMost research in archaeology does not necessarily involve controlled experiments and archaeological survey and excavation are destructive, thus unrepeatable. However, the reproducibility of data collection, processing and analysis is not a trivial concern.\nMaking research reproducible must be considered as a spectrum of practices, in which researchers should thrive for doing better, despite the challenges (Marwick 2017).\n\nBen Marwick, CC-By Attribution 4.0 International, available at OSF\n\n\n1.1.7 The lay of the land: Organizations, tools, data repositories and where to find them\nSeveral organizations and platforms support Open Science and the use of FAIR and Open Source principles, providing archaeologists with access to valuable tools and datasets.\nHere is a list of those that will be most useful during this course:\n\nOrganizations:\n\nOpenAIRE: OpenAIRE AMKE is a non-profit organization with a mission to promote open scholarship and improve discoverability, accessibility, shareability, reusability, reproducibility, and monitoring of data-driven research results, globally (Iatropoulou n.d.).\nGo FAIR Initiative: Provides guidelines on implementing FAIR principles, with resources tailored for researchers in various fields, including archaeology (“FAIR Principles” n.d.).\nThe Turing Way: collaborative writing of an online handbook (Community 2022).\nCAA: Computer Applications and Quantitative Methods in Archaeology (CAA) is an international organisation bringing together archaeologists, mathematicians, and computer scientists. CAA counts with National Chapters, including one for Germany.\n\nData Repositories and Tools:\n\nORCID: ORCID, which stands for Open Researcher and Contributor ID, is a unique alphanumeric code used to identify researchers and contributors in scholarly activities.\n\nZenodo: A repository where researchers can deposit datasets, software, and publications.\n\nOpen Science Foundation: OSF is a free, open platform to support your research and enable collaboration.\nArchaeology Data Service (ADS): An archive for archaeological data from the UK, which provides access to various datasets, including excavation reports and geospatial data.\n\nOpen Context: A platform offering access to archaeological data from various global sources, adhering to FAIR principles [noauthor_open_nodate-1].\nHypothes.is: an open-source platform designed to facilitate collaborative annotation of web content. Is used as a browser extension or plug-in.\n\nOpen Source Tools:\n\nMarkdown: Markdown is a lightweight markup language designed for creating formatted text using a plain-text editor (“Markdown Guide” n.d.).\n\nR and Python: Programming languages with extensive libraries for data analysis, which are widely used in archaeology for statistical analysis and modeling (R Core Team 2024, noauthor_welcome_2024). See more about these and other programming languages below.\n\nRStudio: RStudio IDE is an integrated development environment for R, a programming language for statistical computing and graphics.\nQuarto: An open-source scientific and technical publishing system.\nGit: Git is a distributed version control system designed for tracking changes in source code during software development.\nGitHub: GitHub is a developer platform that allows developers to create, store, manage and share their code through the use of Git software and a series of additional automated services.\nZotero: Zotero is a free, easy-to-use tool to help collect, organize, annotate, cite, and share metadata on references.\n\nQGIS: A free, open-source GIS tool useful for mapping and spatial analysis in archaeology (“Spatial Without Compromise · QGIS Web Site” n.d.).\n\n\nBy utilizing these resources, archaeologists can ensure that their research aligns with Open Science, FAIR, and Open Source principles, ultimately enhancing the transparency, accessibility, and longevity of their work.",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and research data management</span>"
    ]
  },
  {
    "objectID": "session-rdm.html#introduction-to-programming-for-research",
    "href": "session-rdm.html#introduction-to-programming-for-research",
    "title": "1  Data and research data management",
    "section": "1.2 Introduction to Programming for Research",
    "text": "1.2 Introduction to Programming for Research\n\n1.2.1 What is Programming?\nProgramming is the process of designing and implementing instructions that a computer can follow to perform specific tasks. It involves writing code in various programming languages that communicate with the computer’s hardware and software to solve problems, process data, and automate repetitive tasks. At its core, programming is about creating a sequence of steps, known as algorithms, which help achieve a desired outcome (“What Is Programming? And How To Get Started” 2024).\n\n\n1.2.2 Importance of Learning Programming\nFor researchers, learning programming offers several significant advantages:\n\nEfficiency and Automation: Programming can help automate data collection, processing, and analysis, saving time and reducing human error. It also enables researchers to handle large datasets and complex calculations with ease.\nReproducibility: Writing scripts to perform analysis allows other researchers to replicate experiments, thus ensuring results can be verified and reproduced, a fundamental aspect of scientific research.\nAccess to Powerful Tools: With programming skills, researchers can access a wide range of tools for data visualization, statistical analysis, machine learning, and simulation. These tools can enhance the scope and quality of research projects.\n\n\n\n1.2.3 Overview of Common Programming Languages\nSeveral programming languages are popular in research due to their specific features and libraries(“Introduction to Programming Languages” 2018):\n\nPython: Known for its readability and versatility, Python is widely used for data analysis, machine learning, and automation. It has extensive libraries such as NumPy, pandas, and matplotlib, which are particularly useful for data-intensive research.\nR: A language specifically developed for statistical computing and graphics, R is preferred in data science, bioinformatics, and fields requiring extensive statistical analysis. The Comprehensive R Archive Network (CRAN) offers thousands of packages that can handle a range of analytical tasks.\nMATLAB: Commonly used in engineering and scientific research, MATLAB excels at numerical computing, simulation, and algorithm development. It is particularly popular in fields like physics, engineering, and finance.\nJavaScript: While primarily a web development language, JavaScript is also used in research for developing interactive data visualizations and web-based applications.\n\n\n\n1.2.4 Concept of Research Software: Tools and Scripts\nResearch software comprises tools, libraries, and scripts that aid in conducting and managing research activities. It can range from simple scripts for data cleaning and preprocessing to complex software packages for statistical analysis and simulation. Although any software used in research could be considered as research software, advance training focus on programming or scripting skills, not on graphical user interface operations (e.g., creating a plot in R or Python rather than in Microsoft Excel).\n\nTools: Research software tools like Jupyter Notebooks, RStudio, PyCharm, Visual Studio Code, etc., offer integrated development environments (IDEs) tailored to a specific range of languages, enhancing productivity and facilitating code sharing and version control.\nScripts: Scripts are text files encoding programs written to perform specific tasks. In research, scripts are often used for data cleaning, model training, and result visualization. Scripts can be used even to generate and format an entire dataset (have a peek on how the course schedule has been built with R code). These scripts can be shared among researchers to ensure that analyses are reproducible and consistent.\n\nLearning programming for research allows scientists to leverage these tools and scripts effectively, making research more efficient, reproducible, and insightful.\n\n\n1.2.5 Markdown: a language in between\nAs already mentioned, Markdown is a markup language with minimal syntax, designed for creating formatted text using a plain-text editor (“Markdown Guide” n.d.). For us, humans, Markdown is easily readable and editable as text. However, it is technically a programming language, as it holds machine-readable instructions (i.e. program) which, once compiled (or rendered) by the right software, produces the desired output in form of a formatted text. A advanced text editor, such as Microsoft Word, allow you to do exactly the same (and more), but only through a sequence of interactions with the graphic user interface (GUI).\nWriting in Markdown or “writing Markdown code” is straightforward and will only require some getting use to, especially if you costumed to advanced text editors. For example, instead of marking a fragment of text in bold font through the usual steps, we would do it by typing ** (two asterisks) before and after the fragment.\nTo illustrate this, consider the rendering and source code of a markdown text:\n“Live as if you were to die tomorrow. Learn as if you were to live forever.” - Mahatma Gandhi, Source: BrainyQuote\n\"**Live** *as if* you were to **_die tomorrow_**. **Learn** as if you were to **_live forever_**.\"\n\nMahatma Gandhi, Source: [BrainyQuote](https://www.brainyquote.com/citation/quotes/mahatma_gandhi_133995)\nThe simplicity of this language might feel unnecessary, or even annoying, but it is actually the trait that opens a great range of potential applications. Markdown is today indispensable for all practices related to open science and can offer a good entry point for other, more complex programming languages.\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\nObregon (2024)\n\n“What Is Markdown? Syntax, Examples, Usage, Best Practices” (2021)\n\n“Functional Documentation with Markdown and Version Control” (2017)\n“Basic Syntax  Markdown Guide” (n.d.)\n\n\n\n\n\n\n\n1.2.6 Where to learn (and keep learning)\n\nDatacamp (“Learn R, Python & Data Science Online” n.d.)\nUdemy (“Online Courses - Learn Anything, On Your Schedule  Udemy” n.d.)\nCoursera (“Coursera  Degrees, Certificates, & Free Online Courses” n.d.)\nCourses and workshops by high education institutions (e.g,, RUB Research School)\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nTask 1: register yourself as user at:\n\nORCID\n\nGitHub\n\nZenodo\n\nZotero (optional)\n\nHypothes.is (optional)\n\nTask 2: installations:\n\nGit. Follow general instructions here (de) or a video step-by-step tutorial like this) or this (de), among many available online.\nGitHub Desktop\n\nR\nRStudio\nQGIS\n\nTask 3: explore datasets at Open Context\nTask 4: try writing a short document in markdown at Markdown Live Preview.\n\n\n\n\n\n\n\nBaker, Monya. 2016. “1,500 Scientists Lift the Lid on Reproducibility.” Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\n“Basic Syntax  Markdown Guide.” n.d. Accessed October 11, 2024. https://www.markdownguide.org/basic-syntax/.\n\n\nCommunity, The Turing Way. 2022. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/ZENODO.3233853.\n\n\n“Coursera  Degrees, Certificates, & Free Online Courses.” n.d. Accessed October 8, 2024. https://www.coursera.org/.\n\n\nEditor, CSRC Content. n.d. “Metadata - Glossary  CSRC.” Accessed October 14, 2024. https://csrc.nist.gov/glossary/term/metadata.\n\n\n“FAIR Principles.” n.d. GO FAIR. Accessed October 7, 2024. https://www.go-fair.org/fair-principles/.\n\n\n“Functional Documentation with Markdown and Version Control.” 2017. Leon Hassan. https://blog.leonhassan.co.uk/functional-documentation-with-markdown-and-version-control/.\n\n\n“GRN · German Reproducibility Network.” n.d. Accessed October 7, 2024. https://reproducibilitynetwork.de/.\n\n\nHiebel, Gerald, Gert Goldenberg, Caroline Grutsch, Klaus Hanke, and Markus Staudt. 2021. “FAIR Data for Prehistoric Mining Archaeology.” International Journal on Digital Libraries 22 (3): 267–77. https://doi.org/10.1007/s00799-020-00282-8.\n\n\nIatropoulou, Katerina. n.d. “OpenAIRE.” OpenAIRE. Accessed October 7, 2024. https://www.openaire.eu/.\n\n\n“Introduction to Programming Languages.” 2018. GeeksforGeeks. https://www.geeksforgeeks.org/introduction-to-programming-languages/.\n\n\nLamprecht, Anna-Lena, Leyla Garcia, Mateusz Kuzak, Carlos Martinez, Ricardo Arcila, Eva Martin Del Pico, Victoria Dominguez Del Angel, et al. 2020. “Towards FAIR Principles For&nbsp;research&nbsp;software.” Data Science 3 (1): 37–59. https://doi.org/10.3233/DS-190026.\n\n\n“Learn R, Python & Data Science Online.” n.d. Accessed October 8, 2024. https://www.datacamp.com.\n\n\nLien-Talks, Alphaeus. 2024. “How FAIR Is Bioarchaeological Data: With a Particular Emphasis on Making Archaeological Science Data Reusable.” Journal of Computer Applications in Archaeology 7 (1). https://doi.org/10.5334/jcaa.154.\n\n\n“Markdown Guide.” n.d. Accessed October 7, 2024. https://www.markdownguide.org/.\n\n\nMarwick, Ben. 2017. “Open Science in Archaeology,” January. https://doi.org/10.17605/OSF.IO/3D6XX.\n\n\n“Metadata.” 2024. Wikipedia. https://en.wikipedia.org/w/index.php?title=Metadata&oldid=1250210606.\n\n\nNational Academies of Sciences, Engineering, Policy and Global Affairs, Engineering Committee on Science, Board on Research Data Information, Division on Engineering and Physical and Sciences, Committee on Applied and Theoretical Statistics, Board on Mathematical Sciences Analytics, et al. 2019. “Understanding Reproducibility and Replicability.” In Reproducibility and Replicability in Science. National Academies Press (US). https://www.ncbi.nlm.nih.gov/books/NBK547546/.\n\n\nNicholson, Christopher, Sarah Kansa, Neha Gupta, and Rachel Fernandez. 2023. “Will It Ever Be FAIR?: Making Archaeological Data Findable, Accessible, Interoperable, and Reusable.” Advances in Archaeological Practice 11 (1): 63–75. https://doi.org/10.1017/aap.2022.40.\n\n\nObregon, Alexander. 2024. “What Is Markdown? Uses and Benefits Explained.” Medium. https://medium.com/@AlexanderObregon/what-is-markdown-uses-and-benefits-explained-947300e1f955.\n\n\n“Online Courses - Learn Anything, On Your Schedule  Udemy.” n.d. Accessed October 8, 2024. https://www.udemy.com/.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\n“Spatial Without Compromise · QGIS Web Site.” n.d. Accessed October 7, 2024. https://qgis.org/.\n\n\n“What Is FAIR?” n.d. Accessed October 14, 2024. https://www.howtofair.dk/what-is-fair/.\n\n\n“What Is Markdown? Syntax, Examples, Usage, Best Practices.” 2021. https://www.knowledgehut.com/blog/web-development/what-is-markdown.\n\n\n“What Is Metadata and How Does It Work?” n.d. WhatIs. Accessed October 14, 2024. https://www.techtarget.com/whatis/definition/metadata.\n\n\n“What Is Programming? And How To Get Started.” 2024. Coursera. https://www.coursera.org/articles/what-is-programming.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1): 160018. https://doi.org/10.1038/sdata.2016.18.",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and research data management</span>"
    ]
  },
  {
    "objectID": "session-git.html",
    "href": "session-git.html",
    "title": "2  Git and GitHub",
    "section": "",
    "text": "2.1 Version-control and Git",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session-git.html#version-control-and-git",
    "href": "session-git.html#version-control-and-git",
    "title": "2  Git and GitHub",
    "section": "",
    "text": "2.1.1 Version control: general concept and its usefulness\nVersion control is a system that helps track and manage changes to files over time. It’s widely used in software development, but its applications extend to any field where file management is essential, including document editing, research, and project management. At its core, version control provides a historical record of changes, allowing users to revert to previous versions, identify when and why changes were made, and work collaboratively without the risk of overwriting each other’s work.\nThere are two main types of version control: centralized and distributed. Centralized version control systems, such as Subversion (SVN), store files in a central repository. Users check out files, make changes, and then commit them back to the central repository. While effective, centralized systems can be vulnerable if the central server fails. Distributed version control systems, like Git, address this by allowing every user to have a complete copy of the repository on their local machine. This setup enhances collaboration and provides redundancy, as users can work offline and synchronize changes with others when connected.\n\n Git icon\n\n\n\n2.1.2 Benefits of Version Control\n\nCollaboration: Version control systems make collaboration easier and more efficient by allowing multiple users to work on the same project simultaneously. With distributed systems like Git, branches can be created for different features or tasks, and changes can later be merged into the main project seamlessly. This enables teams to work independently and minimize conflicts.\nHistorical Tracking: Version control systems keep a detailed history of all changes made to the files. This allows users to see who made changes, when they were made, and why. If an issue arises, it’s possible to revert to a previous state without losing any data, making debugging easier.\nBackup and Redundancy: In distributed systems, each user’s local copy serves as a backup of the entire project. This redundancy reduces the risk of data loss due to server failures or other issues and allows users to work offline and sync changes later.\nVersion Management: Version control systems assign unique identifiers (usually called “commits”) to each change. These identifiers allow users to switch between different versions of the project easily. It’s also possible to create branches for experimental features and merge them with the main project once they’re stable, facilitating smoother integration of new features.\nEnhanced Workflow: Many version control systems support automated processes such as Continuous Integration (CI) and Continuous Deployment (CD), which streamline development and testing. These systems can automatically test changes before they are merged, ensuring higher code quality and reducing the risk of introducing bugs.\n\nOverall, version control systems are crucial tools in modern project management and development workflows. They enable collaboration, ensure data integrity, and improve productivity by providing a structured approach to managing changes in any type of project.\nGet a short introduction on Git by watching the official Git Documentation videos here.",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session-git.html#git-terminology",
    "href": "session-git.html#git-terminology",
    "title": "2  Git and GitHub",
    "section": "2.2 Git terminology",
    "text": "2.2 Git terminology\nHere are some essential Git terms to know:\n\n\n\n\n\n\n\nRepository: A storage space for your project files and their history. Repositories can be local (on your computer) or remote (on platforms like GitHub).\nInitialise: configure a specific local directory as a working directory as a local repository by creating all necessary files for Git to work.\nAdd/Stage: adds a change in the working directory to the staging area, telling Git to include updates to a particular file in the next commit. However, adding or staging doesn’t really affect the repository since changes are not actually recorded until they are committed (see below).\n\n\n\n\n\n\n\n\nCommit: A snapshot of changes in the repository. Each commit has a unique ID, allowing you to track and revert changes as needed [1].\nBranch: A separate line of development. The default branch is usually called main or master. Branches allow you to work on features independently before merging them into the main project [2].\nMerge: The process of integrating changes from one branch into another. Typically, this involves merging a feature branch into the main branch.\nPull: A command that fetches changes from a remote repository and merges them into your local branch, ensuring your local work is up-to-date with the remote [2].\nPush: Uploads your commits from the local branch to the remote repository, making your changes available to others.\n\nUnderstanding these terms is crucial for effective Git usage and collaboration in any project.\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\n“Git - Gitglossary Documentation” (n.d.)\n\n“Git Definitions and Terminology Cheat Sheet” (n.d.)\n\n\n\n\n\n\n\n\n\n\nCHECK: Git software installation\n\n\n\n\n\nTo verify if Git is installed on your machine, follow these steps:\n\nOpen Command Prompt (Windows 10 or 11)\n\nPress Win + R, type cmd, and hit Enter.\nAlternatively, you can search for “Command Prompt” in the Start menu and select it.\n\nCheck for Git\n\nIn the Command Prompt window, type the following command and press Enter:\ngit --version\nIf Git is installed, you will see the installed version, e.g., git version 2.34.1.\nIf Git is not installed, you will receive an error message or see that the command is unrecognized. You can download the installer from git-scm.com and follow the installation instructions.",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session-git.html#github",
    "href": "session-git.html#github",
    "title": "2  Git and GitHub",
    "section": "2.3 GitHub",
    "text": "2.3 GitHub\n\n2.3.1 What is GitHub?\nGitHub is a cloud-based platform that enables developers to store, manage, and collaborate on code repositories. It builds on Git, a version control system, by adding collaborative features like pull requests, issue tracking, and discussions, which make it easier for teams to work together on software projects.\nGitHub also offers hosting for open-source projects, allowing anyone to contribute or review code. With integrations for CI/CD, project management tools, and documentation, GitHub is a popular choice for developers worldwide to manage both personal and professional projects.\n\n GitHub icon\n\n\n\n\n\n\n\nCHECK: GitHub user and GitHub Desktop installation\n\n\n\n\n\n\nCheck GitHub Desktop Installation\nTo verify that GitHub Desktop is installed:\n\nOn Windows: Go to the Start menu, search for “GitHub Desktop,” and open the app. If it launches successfully, GitHub Desktop is installed.\nOn macOS: Use Spotlight Search (Cmd + Space), type “GitHub Desktop,” and press Enter. If the app opens, it is installed.\n\nIf you don’t have GitHub Desktop, you can download it from desktop.github.com and follow the installation instructions [1][2].\n\n\nVerify GitHub User\nTo check if you are signed in as a GitHub user:\n\nOpen GitHub Desktop.\nGo to File &gt; Options (on Windows) or GitHub Desktop &gt; Preferences (on macOS).\nUnder the Accounts tab, you should see your GitHub username and avatar if you are signed in. If not, you can sign in with your GitHub credentials here.\n\n\n\nBookmark your GitHub user profile page\nIn your Internet browser, make sure that your own GitHub user profile page is saved in Bookmarks for easy access later.\n\n\n\n\n\n\n2.3.2 Working with GitHub\nGitHub offers various workflows to manage repositories. Here are three common methods:\n\n\n\n\n\n\nLocal with GitHub Desktop\n\n\n\n\n\nFor those who prefer a graphical user interface (GUI):\nCloning a Repository\n\nOpen GitHub Desktop.\n\nGo to File &gt; Clone Repository.\n\nSelect the repository and click “Clone.”\n\nCreating a New Branch\n\nClick on the “Current Branch” dropdown.\n\nSelect “New Branch,” name it, and click “Create Branch.”\n\nMaking Changes\n\nEdit files in your editor.\n\nCommitting Changes\n\nReturn to GitHub Desktop.\n\nStage changed files by ticking the boxes.\n\nWrite a summary of changes and click “Commit to new-branch.”\n\nPushing Changes\n\nClick “Push origin” to upload your changes.\n\n\n\n\n\n\n\n\n\n\nRemote with Web Browser\n\n\n\n\n\nYou can also work directly on GitHub.com:\nCloning a Repository\n\nGo to the repository page.\n\nClick the green “Code” button and copy the link.\n\nCreating a New Branch\n\nClick the branch dropdown on the main page.\n\nType a new branch name and click “Create branch.”\n\nMaking Changes\n\nNavigate to the file (and branch) you want to edit.\n\nClick the pencil icon to edit.\n\nMake your changes and scroll down to the “Commit changes” section.\n\nCommitting Changes\n\nEnter a commit message.\n\nChoose whether to “commit to directly to main” or “Commit to a new branch…”.\n\nPushing Changes\n(No push is needed as changes are automatically saved to GitHub.)\n\n\n\n\n\n\n\n\n\nLocal with Console Commands (advanced users)\n\n\n\n\n\nTo work with Git via the command line:\nNavigate to the directory to hold the local copy\ncd path/to/local/directory\nCloning a Repository\ngit clone https://github.com/username/repository.git\nCreating a New Branch\ngit checkout -b new-branch\nMaking Changes Edit files in your favorite text editor or IDE.\nCommitting Changes\ngit add .\ngit commit -m \"Describe your changes\"\nPushing Changes\ngit push origin new-branch\n\n\n\nThese workflows enable flexibility in how you manage your projects on GitHub.\n\n\n2.3.3 Markdown (GitHub-flavoured)\nWhen Markdown files (.md) are placed in a GitHub repository, they will be automatically rendered within GitHub web interface by default, while the raw code can still be seen and edited in Markdown.\nThere are some particularities about how Markdown files will be rendered in GitHub through Internet browsers. Consult GitHub Docs for knowing more about them.\n\n\n2.3.4 How to organise repositories\nWhen structuring your repositories, it’s helpful to follow some common conventions for organizing files in subdirectories. This makes projects more readable and easier for others to navigate. Here are some commonly used subdirectories:\nWhen software development is a significant part:\n* source/ or src/: Contains the main source code for the project.\n* documentation/, docs/, or doc/: Stores documentation, such as guides or API references.\n* tests/: Includes test scripts to ensure code functionality. * bin/: Holds executable scripts or binaries. * config/: Contains configuration files, like YAML or JSON.\nWhen rendering an interface for users, such as an website, web app or video game:\n* assets: to hold files and subdirectories with closed content and functionality files. * assets/images/, assets/media/, etc.: Holds all images or other media files generated externally (not by the repository’s source code). * assets/styles.css or assets/css/: all CSS code for formatting HTML objects. * assets/js/: JavaScript source code enabling interactive functionalities (it would also apply for other programming languages in similar position). Source code of this kind might also be placed inside the source code folder, if present.\nThese folder structures are conventions and not strict rules. You can adapt or modify them based on your project’s needs.\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\njimmy (2022)\n\nZestyclose-Low-6403 (2023)\n\ndanijar (2019)\nSuhail (2024)\n\nCioara (2018)\n\n\n\n\n\n\n2.3.5 Conventional files\n\nREADME.md: Provides an overview of the project, including what it does, how to set it up, and how to contribute. A few sections examples are:\n\nGeneral description\n\nAuthors and/or contributors\n\nAcknowledgements\n\nFunding\n\nInstallation or use instructions\n\nContributing\n\n\nLICENSE: Specifies the terms under which the content of the repository can be used, modified, and distributed. There are many licenses, varying in permissiveness and type of content. Generally, for projects involving both code and other kinds of content, we recommend CC0-1.0 or MIT. See https://choosealicense.com/ and GitHub Docs).\nCITATION.cff: human- and machine-readable citation information for software (and datasets). See example here.\n\n.gitignore: Lists files and directories that Git should ignore, such as build outputs and temporary files.\n\nCHANGELOG.md: Logs a chronological record of all notable changes made to the project, often following conventions like Conventional Commits.\n\nreferences.bib: a file containing references in BibTex format, which can be cited within the markdown files of the repository.\n\n\n\n2.3.6 Version Tags and Releases on GitHub\nTo manage different versions of your project, GitHub allows you to create tags and releases:\n\nCreate a Tag:\n\nOpen your repository on GitHub and navigate to the Releases section.\nClick Draft a new release.\nIn the Tag version field, type a version number (e.g., v1.0.0) to create a new tag (see more in the note below).\nSpecify the target branch or commit for this tag.\n\nCreate a Release:\n\nAfter tagging, enter details such as the release title and description.\nOptionally, add release notes to summarize changes or new features [1].\nClick Publish release to make it public.\n\n\nReleases are tied to tags and provide a stable reference for each version, making it easy for users to download specific versions of your project [2].\n\n\n\n\n\n\nAbout versioning\n\n\n\n\n\nIf unfamiliar with the logic behind versioning, consult the reference to Semantic Versioning which can also be found on the right of the “Create a new release” page in GitHub. Their summary states:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the: 1. MAJOR version when you make incompatible API changes 2. MINOR version when you add functionality in a backward compatible manner 3. PATCH version when you make backward compatible bug fixes\n\nHowever, if your repository is not about creating software products and services, we can do well by simply obeying a few general conventions:\n\nAdd a PATCH version discretionally when correcting bugs, typos, tuning aesthetics, etc, or refactoring code (explained in Chapter 4).\nAdd a MINOR version when expanding code functionality or adding new content (text sections, images)\nAdd a new PATCH or MINOR version every time the repository reaches a natural stable point (i.e., there are no changes planned any time soon).\nMake sure that every new MAJOR version is released (GitHub) and published (Zenodo, see below).\n\n\n\n\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\n“Creating GitHub Releases Automatically on Tags” (2024)\n“Automatically Generated Release Notes” (n.d.)\n\nSignell (2013)\n\n\n\n\n\n\n\n2.3.7 Establishing a GitHub-Zenodo Connection\nTo link your GitHub repository with Zenodo and enable citation via DOI:\n\nLogin to Zenodo: Go to Zenodo and sign in or create an account.\nAuthorize GitHub Access:\n\nClick on your profile in Zenodo and select Linked accounts.\nChoose Connect next to GitHub.\nYou will be redirected to GitHub to authorize Zenodo’s access. Approve the request to complete the connection.\n\nSelect Repository for DOI Generation:\n\nIn Zenodo, navigate to GitHub in the Linked Accounts section.\nEnable DOI generation for the desired repository. Zenodo will automatically mint DOIs for any new release you publish.\n\n\nThis connection allows you to generate and manage DOIs for GitHub repositories, enhancing your project’s citation and research accessibility.\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\n“Referencing and Citing Content” (n.d.)\n\n“Zenodo - Research. Shared.” (n.d.)\n\n“Created New Organization in GitHub and Zenodo Did Not Send a Request for Accessing It · Issue #1596 · Zenodo/Zenodo” (n.d.)\n\n“Module-5-Open-Research-Software-and-Open-Source/Content_development/Task_2.md at Master · OpenScienceMOOC/Module-5-Open-Research-Software-and-Open-Source” (n.d.)\n\n“Issue a Doi with Zenodo” (n.d.)\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nTask 1: Create a profile repository with a README file following GitHub Docs: Quickstart for writing on GitHub.\nTask 2: Making others’ repositories your own’s\n\nFork the Course Book repository.\n\nClone your fork to a local directory.\n\nModify or add a .qmd file in your local directory.\nCommit to you local repository (one or more times).\n\nPush the changed local repository to your remote repository (i.e. your fork).\n\nCreate a pull request back to the original repository.\n\nTask 3: Create a personal project repository\n\nCreate a GitHub repository under your user. Named it rub-archwiss_ followed by your surname (no special characters). Initialise with the following properties:\n\n\nPublic\nWith a README file\nwith .gitignore (template for R)\nWith a license of you choice.\n\n\nAdd all other conventional files mentioned above, even if they remain empty for now.\nEdit your README file and commit/push your changes.\n\nTask 4:\n\nSet up the GitHub-Zenodo connection.\n\nPublish your repository.\n\nUpdate README with the new Zenodo DOI (badge).\n\n\n\n\n\n\n\n\n“Automatically Generated Release Notes.” n.d. GitHub Docs. Accessed October 11, 2024. https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes.\n\n\nCioara, Andrei. 2018. “How I Organize My GitHub Repositories.” Medium. https://andreicioara.com/how-i-organize-my-github-repositories-ce877db2e8b6.\n\n\n“Created New Organization in GitHub and Zenodo Did Not Send a Request for Accessing It · Issue #1596 · Zenodo/Zenodo.” n.d. GitHub. Accessed October 11, 2024. https://github.com/zenodo/zenodo/issues/1596.\n\n\n“Creating GitHub Releases Automatically on Tags.” 2024. https://jacobtomlinson.dev/posts/2024/creating-github-releases-automatically-on-tags/.\n\n\ndanijar. 2019. “Can I Arrange Repositories into Folders on Github?” Forum post. Stack Overflow. https://stackoverflow.com/q/11852982/6199967.\n\n\n“Git - Gitglossary Documentation.” n.d. Accessed October 11, 2024. https://git-scm.com/docs/gitglossary.\n\n\n“Git Definitions and Terminology Cheat Sheet.” n.d. Accessed October 11, 2024. https://www.pluralsight.com/resources/blog/cloud/git-terms-explained.\n\n\n“Issue a Doi with Zenodo.” n.d. Github for Collaborative Documentation. Accessed October 11, 2024. https://cassgvp.github.io/github-for-collaborative-documentation/docs/tut/6-Zenodo-integration.html.\n\n\njimmy. 2022. “How to Organize GitHub Repositories.” Backrightup. https://backrightup.com/blog/how-to-organize-github-repositories/.\n\n\n“Module-5-Open-Research-Software-and-Open-Source/Content_development/Task_2.md at Master · OpenScienceMOOC/Module-5-Open-Research-Software-and-Open-Source.” n.d. GitHub. Accessed October 11, 2024. https://github.com/OpenScienceMOOC/Module-5-Open-Research-Software-and-Open-Source/blob/master/content_development/Task_2.md.\n\n\n“Referencing and Citing Content.” n.d. GitHub Docs. Accessed October 11, 2024. https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content.\n\n\nSignell, Rich. 2013. “How to Handle Releases of Markdown Document on Github.” Forum post. Stack Overflow. https://stackoverflow.com/q/19727632/6199967.\n\n\nSuhail, Muhammad Ahmed. 2024. “Structuring and Organizing My Github: A Developer’s Guide.” Medium. https://medium.com/@muhammadahmedsuhail007/structuring-and-organizing-my-github-a-developers-guide-7353610f04fd.\n\n\n“Zenodo - Research. Shared.” n.d. Accessed October 11, 2024. https://help.zenodo.org/docs/profile/linking-accounts/.\n\n\nZestyclose-Low-6403. 2023. “How to Organize Repos Within an ’Organization’?” Reddit {Post}. R/Github. www.reddit.com/r/github/comments/188d324/how_to_organize_repos_within_an_organization/.",
    "crumbs": [
      "Getting started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html",
    "href": "session-r-introduction.html",
    "title": "3  Introduction to R",
    "section": "",
    "text": "3.1 Preparation",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#preparation",
    "href": "session-r-introduction.html#preparation",
    "title": "3  Introduction to R",
    "section": "",
    "text": "Installing R and RStudio.\n\nOverview of RStudio interface.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#r-syntax-and-workflow",
    "href": "session-r-introduction.html#r-syntax-and-workflow",
    "title": "3  Introduction to R",
    "section": "3.2 R syntax and workflow",
    "text": "3.2 R syntax and workflow\n\nBasic R syntax: variables and data types.\n\nWriting and executing R scripts.\n\nArithmetic operations, logical operations in R.\n\nAlgorithm structures: if, else, while, function\n\nPackages. Mention the most important packages used later, including tidyverse and tesselle.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#basic-data-structures-in-r",
    "href": "session-r-introduction.html#basic-data-structures-in-r",
    "title": "3  Introduction to R",
    "section": "3.3 Basic Data Structures in R",
    "text": "3.3 Basic Data Structures in R\n\nVectors, matrices, data frames, lists.\n\nBasic operations on data structures (indexing, subsetting, adding/removing elements).",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#data-manipulation-in-r",
    "href": "session-r-introduction.html#data-manipulation-in-r",
    "title": "3  Introduction to R",
    "section": "3.4 Data Manipulation in R",
    "text": "3.4 Data Manipulation in R\n\nImporting data: reading data from CSV files, using canonical datasets (iris, archdata::DartPoints).\n\nBasic data manipulation using base R (subset, merge, apply functions).\n\nIntroduction to dplyr package for data manipulation (filtering, selecting, mutating data).",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#data-visualization",
    "href": "session-r-introduction.html#data-visualization",
    "title": "3  Introduction to R",
    "section": "3.5 Data Visualization",
    "text": "3.5 Data Visualization\n\nIntroduction to plots: histograms, bar plots, scatter plots.\n\nCreating plots in R with base R graphics.\n\nCreating multiple plot figures with layout.\n\nCreating plots in ggplot2.\n\nCreating multiple plot figures with gridExtra::grid.arrange.\n\nBase R graphics and ggplot2: comparative\n\nSaving plots: open and closing graphic devices in R.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-introduction.html#extrainteractive-visualizations",
    "href": "session-r-introduction.html#extrainteractive-visualizations",
    "title": "3  Introduction to R",
    "section": "3.6 (EXTRA)Interactive Visualizations",
    "text": "3.6 (EXTRA)Interactive Visualizations\n\nIntroduction to creating interactive visualizations.\n\nExample: Building an interactive plot using plotly and knitr.\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nCreate a new project in RStudio, placing it at the root directory of your own repository (cloned local branch).\n\nCreate a data.frame named “stone_tools_data” directly in R with the following characteristics (based on Carlson 2017, p. 26):\n\nSet of six stone tools with inventory number\n\nRecording of dimensions (length, breadth, thickness), material type, and whether the material is local or non-local.\n\nData per object:\n\nLN15:\n\nLength: 18\n\nBreadth: 9\n\nThickness: 3\n\nMaterial type: chert\n\nMaterial provenance: local\n\n\nLN17:\n\nLength: 14\n\nBreadth: 7\n\nThickness: 2\n\nMaterial type: chert\n\nMaterial provenance: local\n\n\nLN18:\n\nLength: 21\n\nBreadth: 10\n\nThickness: 3\n\nMaterial type: obsidian\n\nMaterial provenance: local\n\n\nLN21:\n\nLength: 14\n\nBreadth: 7\n\nThickness: 3\n\nMaterial type: chert\n\nMaterial provenance: non-local\n\n\nLN23:\n\nLength: 17\n\nBreadth: 8\n\nThickness: 3\n\nMaterial type: obsidian\n\nMaterial provenance: local\n\n\nLN24:\n\nLength: 16\n\nBreadth: 8\n\nThickness: 2\n\nMaterial type: obsidian\n\nMaterial provenance: non-local\n\n\n\n\nCheck that the data and data types are coherent with the specifications. Save it as a CSV file and load it back as a new R object (e.g. “stone_tools_data2”). Compare.\n\nCreate a plot showing the counts of objects made of chert and obsidian. Save it as a PNG file.\n\nCreate a new variable (“type_and_provenance”) that combines type and provenance and create a plot showing the counts in each category. Save it as a PNG file.\n\nCreate a single figure displaying the variable distribution of the three dimensions measured. Save it as both a PNG and a SVG file.\n\nCreate a plot displaying the relationship between length and breadth. Save it as a PNG file.\n\nCreate a plot displaying the relationship between length and breadth, this time marking (point type, colour) objects by their “type_and_provenance”. Save it as both a PNG and a EPS file.\n\n(EXTRA) Create a figure to help explore the question: Do stone tools of different material and provenance tend to be of different size?\n\nCommit all changes and push to the remote using RStudio.\n\nQ&A and troubleshooting.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html",
    "href": "session-r-programming.html",
    "title": "4  Best practices in programming",
    "section": "",
    "text": "4.1 Code Organisation",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#code-organisation",
    "href": "session-r-programming.html#code-organisation",
    "title": "4  Best practices in programming",
    "section": "",
    "text": "Modular Programming\n\nImportance of modularity: breaking down code into functions and modules.\n\nExample: Creating in-script custom functions.\n\nExample: Creating and importing custom R scripts.\n\n\nCode Structuring\n\nStructuring a data science project: folder organization, separating code, data, and outputs.\n\nExample: Setting up a basic project structure in R and RStudio.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#writing-clean-and-readable-code",
    "href": "session-r-programming.html#writing-clean-and-readable-code",
    "title": "4  Best practices in programming",
    "section": "4.2 Writing Clean and Readable Code",
    "text": "4.2 Writing Clean and Readable Code\n\nNaming Conventions\n\nUsing meaningful and consistent names for variables, functions, and files.\n\nExample: Best practices in naming conventions in R (tidyverse style guide).\n\n\nCommenting and Documentation\n\nImportance of comments and inline documentation.\n\nExample: Writing using roxygen2 in R for documenting functions.\n\n\nAvoiding Magic Numbers and Hardcoding\n\nUse of constants and configuration files.\n\nExample: Using constants in R.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#writing-efficient-and-scalable-code",
    "href": "session-r-programming.html#writing-efficient-and-scalable-code",
    "title": "4  Best practices in programming",
    "section": "4.3 Writing Efficient and Scalable Code",
    "text": "4.3 Writing Efficient and Scalable Code\n\nVectorization\n\nAvoiding loops by using vectorized operations for efficiency.\n\nExample: Implementing vectorized operations in R (base R, dplyr).\n\n\nMemory Management\n\nManaging memory usage and avoiding memory leaks.\n\nExample: Best practices for handling large datasets in R (using data.table).",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#extratesting-and-validation",
    "href": "session-r-programming.html#extratesting-and-validation",
    "title": "4  Best practices in programming",
    "section": "4.4 (EXTRA)Testing and Validation",
    "text": "4.4 (EXTRA)Testing and Validation\n\nWriting Unit Tests\n\nImportance of testing: ensuring code correctness.\n\nExample: Writing basic unit tests in Python (unittest or pytest) and R (testthat).\n\n\nData Validation\n\nValidating data inputs and outputs, ensuring data integrity.\n\nExample: Implementing data validation checks in data processing scripts.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#extraerror-handling-and-debugging",
    "href": "session-r-programming.html#extraerror-handling-and-debugging",
    "title": "4  Best practices in programming",
    "section": "4.5 (EXTRA)Error Handling and Debugging",
    "text": "4.5 (EXTRA)Error Handling and Debugging\n\nError Handling Techniques\n\nUsing tryCatch in R.\n\nWriting meaningful error messages.\n\nExample: Implementing error handling in a data processing script.\n\n\nDebugging Tools\n\nIntroduction to debugging tools: browser in R.\n\nExample: Walkthrough of a debugging session in R.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-r-programming.html#extracode-reusability-and-sharing",
    "href": "session-r-programming.html#extracode-reusability-and-sharing",
    "title": "4  Best practices in programming",
    "section": "4.6 (EXTRA)Code Reusability and Sharing",
    "text": "4.6 (EXTRA)Code Reusability and Sharing\n\nCreating Reusable Code\n\nWriting functions and libraries for reuse across projects.\n\nExample: Creating a simple R package.\n\n\nSharing Code\n\nSharing code with others: publishing packages, sharing notebooks.\n\nExample: Publishing an R package on CRAN/GitHub.\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nRefactoring Code (30min)\n\nFirst attempt: Refactoring a sample script to follow best practices (clean code, modularity, documentation).\n\nSecond attempt: try using a Large Language Model (LLM) to refactor.\n\n\nCollaborative Exercise (40min)\n\nSimulating a collaborative workflow with Git: making and reviewing pull requests.\n\nGroups of two or three\n\nRe-use one of the repositories created in GitHub (Session 2) and populated by R code and output files (Session 3).\n\nMutual reviews and change suggestions.\n\nDiscussion, accepting/rejecting changes, and merge decision\n\n\nOpen discussion (10min)\n\nAddressing common challenges in applying best practices to real-world projects.",
    "crumbs": [
      "Programming in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Best practices in programming</span>"
    ]
  },
  {
    "objectID": "session-count-and-seriation.html",
    "href": "session-count-and-seriation.html",
    "title": "5  Count data and seriation",
    "section": "",
    "text": "5.1 Introduction to Count Data in Archaeology",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Count data and seriation</span>"
    ]
  },
  {
    "objectID": "session-count-and-seriation.html#introduction-to-count-data-in-archaeology",
    "href": "session-count-and-seriation.html#introduction-to-count-data-in-archaeology",
    "title": "5  Count data and seriation",
    "section": "",
    "text": "Understanding Count Data\n\nDefinition and significance of count data in archaeological contexts (e.g., artifact counts, feature frequencies).\n\nExample: Overview of typical archaeological datasets involving count data.\n\n\nChallenges in Analysing Count Data\n\nIssues with skewness, overdispersion, and zero inflation.\n\nExample: Common problems encountered in archaeological count data analysis.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Count data and seriation</span>"
    ]
  },
  {
    "objectID": "session-count-and-seriation.html#basic-statistical-methods-for-count-data",
    "href": "session-count-and-seriation.html#basic-statistical-methods-for-count-data",
    "title": "5  Count data and seriation",
    "section": "5.2 Basic Statistical Methods for Count Data",
    "text": "5.2 Basic Statistical Methods for Count Data\n\nPoisson and Negative Binomial Distributions\n\nIntroduction to Poisson distribution and its application to count data.\n\nExample: Fitting a Poisson model using glm in R.\n\nIntroduction to the Negative Binomial distribution for overdispersed data.\n\nExample: Fitting a Negative Binomial model using MASS::glm.nb.\n\n\nGoodness-of-Fit Testing\n\nAssessing the fit of count data models.\n\nExample: Performing a chi-square goodness-of-fit test in R.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Count data and seriation</span>"
    ]
  },
  {
    "objectID": "session-count-and-seriation.html#introduction-to-seriation",
    "href": "session-count-and-seriation.html#introduction-to-seriation",
    "title": "5  Count data and seriation",
    "section": "5.3 Introduction to Seriation",
    "text": "5.3 Introduction to Seriation\n\nWhat is Seriation?\n\nOverview of seriation techniques and their importance in archaeology for ordering artefacts or sites chronologically.\n\nExample: Historical applications of seriation in archaeology.\n\n\nSeriation Techniques\n\nIntroduction to different seriation methods (e.g., frequency seriation, contextual seriation).\n\nExample: Basic seriation using traditional methods.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Count data and seriation</span>"
    ]
  },
  {
    "objectID": "session-count-and-seriation.html#using-the-tesselle-package-for-seriation",
    "href": "session-count-and-seriation.html#using-the-tesselle-package-for-seriation",
    "title": "5  Count data and seriation",
    "section": "5.4 Using the tesselle Package for Seriation",
    "text": "5.4 Using the tesselle Package for Seriation\n\nIntroduction to tesselle\n\nOverview of the tesselle package and its tools for seriation.\n\nExample: Installation and loading of tesselle.\n\n\nPractical Seriation in R\n\nPerforming seriation.\n\nExample: Applying seriation to an archaeological dataset (e.g., pottery styles, stratigraphic data).\n\n\nVisualizing Seriation Results\n\nCreating visual representations of seriation results.\n\nExample: Plotting seriation outputs.\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nCase Study: Seriation of Archaeological Artefacts\n\nStep-by-step walkthrough of a seriation analysis using count data.\n\nExample: Seriation of pottery fragments or lithic tools using tesselle.\n\n\nQ&A and Troubleshooting\n\nAddressing common issues in count data analysis and seriation in archaeological contexts.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Count data and seriation</span>"
    ]
  },
  {
    "objectID": "session-compositional-data.html",
    "href": "session-compositional-data.html",
    "title": "6  Compositional data",
    "section": "",
    "text": "6.1 Introduction to Compositional Data in Archaeology",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Compositional data</span>"
    ]
  },
  {
    "objectID": "session-compositional-data.html#introduction-to-compositional-data-in-archaeology",
    "href": "session-compositional-data.html#introduction-to-compositional-data-in-archaeology",
    "title": "6  Compositional data",
    "section": "",
    "text": "Understanding Compositional Data\n\nDefinition and examples of compositional data in archaeology (e.g., proportions of different materials, chemical compositions).\n\nExample: Typical archaeological datasets that include compositional data.\n\n\nChallenges in Analysing Compositional Data\n\nIssues with relative proportions and the “closed” nature of compositional data.\n\nExample: Limitations of traditional statistical methods on compositional data.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Compositional data</span>"
    ]
  },
  {
    "objectID": "session-compositional-data.html#basic-concepts-in-compositional-data-analysis",
    "href": "session-compositional-data.html#basic-concepts-in-compositional-data-analysis",
    "title": "6  Compositional data",
    "section": "6.2 Basic Concepts in Compositional Data Analysis",
    "text": "6.2 Basic Concepts in Compositional Data Analysis\n\nOverview of methods in Multivariate statistics\n\nLog-Ratio Transformations\n\nIntroduction to log-ratio transformations (CLR, ILR, ALR) for compositional data.\n\nExample: Applying a centred log-ratio (CLR) transformation in R (e.g. nexus::transform_clr).\n\n\nVisualizing Compositional Data\n\nTechniques for visualizing compositional data (ternary plots, bar charts).\n\nExample: Creating a ternary plot using the isopleuros::ternary_plot and ggtern.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Compositional data</span>"
    ]
  },
  {
    "objectID": "session-compositional-data.html#exploratory-data-analysis",
    "href": "session-compositional-data.html#exploratory-data-analysis",
    "title": "6  Compositional data",
    "section": "6.3 Exploratory Data Analysis",
    "text": "6.3 Exploratory Data Analysis\n\nPrincipal Component Analysis (PCA)\n\nIntroduction to PCA tailored for compositional data.\n\nExample: Performing PCA on compositional data using tesselle::nexus::pca.\n\nBiplots and screeplots\n\nExample: Plotting PCA results as a biplot and add visualisation aids using tesselle::dimensio functions.\n\n\nCluster Analysis\n\nOverview of clustering techniques for exploring groupings in compositional data.\n\nExample: Applying hierarchical clustering on transformed compositional data using tesselle.\n\nggplot2: dendrograms with ggraph\n\n\nCorrespondence Analysis\n\nCorrespondence Analysis for compositional data.\n\nExample: Performing Correspondence Analysis using tesselle::ca.\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nCase Study: Analysis of Compositional Data from Archaeological Sites\n\nStep-by-step walkthrough of an exploratory analysis of compositional data.\n\nExample: Analysing chemical compositions of ceramics or soils using tesselle.\n\n\nQ&A and Troubleshooting\n\nAddressing challenges in visualizing and analyzing compositional data in archaeological research.",
    "crumbs": [
      "Data Science in R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Compositional data</span>"
    ]
  },
  {
    "objectID": "session-database-1.html",
    "href": "session-database-1.html",
    "title": "7  Databases (I)",
    "section": "",
    "text": "7.1 Introduction to Databases in Archaeology",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Databases (I)</span>"
    ]
  },
  {
    "objectID": "session-database-1.html#introduction-to-databases-in-archaeology",
    "href": "session-database-1.html#introduction-to-databases-in-archaeology",
    "title": "7  Databases (I)",
    "section": "",
    "text": "What is a Database?\n\nDefinition and importance of databases in archaeology (data storage, retrieval, and management).\n\nExample: Common uses of databases for managing archaeological data (e.g., artifacts, excavation records).\n\n\nTypes of Databases\n\nOverview of relational vs. non-relational databases.\n\nExample: Advantages of relational databases for structured archaeological data.",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Databases (I)</span>"
    ]
  },
  {
    "objectID": "session-database-1.html#relational-database-concepts",
    "href": "session-database-1.html#relational-database-concepts",
    "title": "7  Databases (I)",
    "section": "7.2 Relational Database Concepts",
    "text": "7.2 Relational Database Concepts\n\nBasic Concepts\n\nIntroduction to tables, records, fields, primary and foreign keys.\n\nExample: Organizing excavation data in relational tables (e.g., site locations, stratigraphy, finds).\n\n\nNormalization\n\nIntroduction to database normalization (avoiding redundancy, ensuring data integrity).\n\nExample: Structuring artifact data into normalized tables (e.g., artifact type, material, condition).\n\n\nEntity-Relationship (ER) Models\n\nCreating ER models to visualize relationships between archaeological datasets.\n\nExample: Designing an ER diagram for an archaeological database (e.g., site, context, finds).",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Databases (I)</span>"
    ]
  },
  {
    "objectID": "session-database-1.html#introduction-to-sql-structured-query-language",
    "href": "session-database-1.html#introduction-to-sql-structured-query-language",
    "title": "7  Databases (I)",
    "section": "7.3 Introduction to SQL (Structured Query Language)",
    "text": "7.3 Introduction to SQL (Structured Query Language)\n\nBasic SQL Commands\n\nOverview of SQL syntax and common commands (e.g., CREATE, INSERT, SELECT, UPDATE).\n\nExample: Creating tables for archaeological data and inserting records.\n\n\nCreating a Database with SQL\n\nStep-by-step process of building an archaeological database using SQL.\n\nExample: Creating an artifact catalogue with fields such as artifact ID, type, material, and context.\n\n\nIndexing and Keys\n\nExplanation of primary keys, foreign keys, and indexing for optimizing database performance.\n\nExample: Defining keys to link excavation sites to finds in different tables.\n\n\nBasic Querying with SQL\n\nWriting basic queries to retrieve data from a database.\n\nExample: Using SELECT statements to extract information about finds or excavation layers.\n\n\nFiltering and Sorting Data\n\nUsing WHERE, ORDER BY, and GROUP BY clauses to filter and sort data.\n\nExample: Querying artifacts by material type or sorting excavation records by date.\n\n\nJoining Tables\n\nUsing JOIN statements to combine related tables (e.g., linking artifact data with stratigraphy).\n\nExample: Writing queries to retrieve artifacts based on their excavation context.",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Databases (I)</span>"
    ]
  },
  {
    "objectID": "session-database-1.html#database-tools-for-archaeology",
    "href": "session-database-1.html#database-tools-for-archaeology",
    "title": "7  Databases (I)",
    "section": "7.4 Database Tools for Archaeology",
    "text": "7.4 Database Tools for Archaeology\n\nAccessing Databases from R\n\nIntroduction to R packages (DBI, RSQLite, RPostgres) for interacting with databases.\n\nExample: Connecting to an SQLite or PostgreSQL database from R for archaeological data analysis.\n\n\nSQLite for small projects\n\nIntroduction to SQLite as a lightweight database solution for archaeological projects.\n\nExample: Creating a simple SQLite database for site data using R (RSQLite, e.g. https://cran.r-project.org/web/packages/RSQLite/vignettes/RSQLite.html) or Python.\n\n\nPostgreSQL for larger projects\n\nOverview of PostgreSQL for larger archaeological datasets.\n\nExample: Setting up a PostgreSQL database in R for managing excavation records.\n\n\nQuerying Databases in R\n\nWriting SQL queries in R and retrieving data for further analysis.\n\nExample: Querying an excavation database from R and visualizing the results with ggplot2.\n\n\nData Wrangling and Cleaning\n\nUsing R to clean and manipulate database data for analysis.\n\nExample: Using dplyr in R to filter and transform queried data.\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nBuilding a Small Archaeological Database\n\nStep-by-step walkthrough of creating a database schema for a hypothetical excavation project (using RSQLite).\n\nExample: Creating tables for stratigraphy, finds, and context.\n\n\nInserting and Managing Data\n\nPractical examples of adding and managing archaeological data.\n\nExample: Inserting excavation records into the database using SQL.\n\n\nQ&A and Troubleshooting\n\nAddressing challenges in database design and SQL queries.",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Databases (I)</span>"
    ]
  },
  {
    "objectID": "session-database-2.html",
    "href": "session-database-2.html",
    "title": "8  Databases (II)",
    "section": "",
    "text": "8.1 Using GIS Databases for Archaeology",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Databases (II)</span>"
    ]
  },
  {
    "objectID": "session-database-2.html#using-gis-databases-for-archaeology",
    "href": "session-database-2.html#using-gis-databases-for-archaeology",
    "title": "8  Databases (II)",
    "section": "",
    "text": "Introduction to Spatial Databases\n\nOverview of spatial databases and their use in archaeology (e.g., storing geospatial excavation data).\n\nExample: Introduction to PostGIS for spatial data management in PostgreSQL.\n\n\nLinking GIS Data to Databases\n\nUsing databases to manage spatial data for archaeological analysis.\n\nExample: Storing site coordinates and linking them to excavation records in a spatial database.\n\n\nQuerying Spatial Data\n\nWriting spatial queries to retrieve geospatial data from a database.\n\nExample: Querying sites within a specific radius or extracting artifact distributions across layers.\n\n\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\nQuerying and Analyzing Archaeological Data\n\nWalkthrough of writing SQL queries to extract meaningful insights from archaeological data.\n\nExample: Retrieving and analyzing artifact distributions based on context and stratigraphy.\n\n\nCombining Database and Spatial Data\n\nPractical examples of integrating database queries with GIS data for archaeological site analysis.\n\nExample: Using a database to visualize the spatial distribution of artifacts across an excavation site.\n\n\nQ&A and Troubleshooting\n\nAddressing challenges in querying and analyzing archaeological databases.",
    "crumbs": [
      "Databases",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Databases (II)</span>"
    ]
  },
  {
    "objectID": "session-gis-1.html",
    "href": "session-gis-1.html",
    "title": "9  GIS (I)",
    "section": "",
    "text": "(Basic concepts, installation and setting up, loading files)\n\nCool archive video about ARCInfo (1988): https://youtu.be/7xqNyUOIRCs?si=FulmlUVzaThGE9BU\n\n(Dooley n.d.)\n\n\n\n\n\n\nHands-on Practice\n\n\n\n\n\n\n\n\n\n\nDooley, Andy MacLachlan, Adam Dennett and Claire. n.d. CASA0005 Geographic Information Systems and Science. Accessed October 9, 2024. https://andrewmaclachlan.github.io/CASA0005repo/index.html.",
    "crumbs": [
      "GIS",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>GIS (I)</span>"
    ]
  },
  {
    "objectID": "session-gis-2.html",
    "href": "session-gis-2.html",
    "title": "10  GIS (II)",
    "section": "",
    "text": "(get a map image displaying data from shape and raster files)\n\n\n\n\n\n\nHands-on Practice",
    "crumbs": [
      "GIS",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>GIS (II)</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "“Automatically Generated Release Notes.” n.d. GitHub\nDocs. Accessed October 11, 2024. https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes.\n\n\nBaker, Monya. 2016. “1,500 Scientists Lift the Lid on\nReproducibility.” Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\n“Basic Syntax  Markdown\nGuide.” n.d. Accessed October 11, 2024. https://www.markdownguide.org/basic-syntax/.\n\n\nCioara, Andrei. 2018. “How I Organize My\nGitHub Repositories.” Medium.\nhttps://andreicioara.com/how-i-organize-my-github-repositories-ce877db2e8b6.\n\n\nCommunity, The Turing Way. 2022. “The Turing\nWay: A Handbook for Reproducible, Ethical and\nCollaborative Research.” Zenodo. https://doi.org/10.5281/ZENODO.3233853.\n\n\n“Coursera  Degrees,\nCertificates, & Free Online\nCourses.” n.d. Accessed October 8, 2024. https://www.coursera.org/.\n\n\n“Created New Organization in GitHub and\nZenodo Did Not Send a Request for Accessing It ·\nIssue #1596 · Zenodo/Zenodo.” n.d. GitHub.\nAccessed October 11, 2024. https://github.com/zenodo/zenodo/issues/1596.\n\n\n“Creating GitHub Releases Automatically\non Tags.” 2024. https://jacobtomlinson.dev/posts/2024/creating-github-releases-automatically-on-tags/.\n\n\ndanijar. 2019. “Can I Arrange Repositories into\nFolders on Github?” Forum post. Stack\nOverflow. https://stackoverflow.com/q/11852982/6199967.\n\n\nDooley, Andy MacLachlan, Adam Dennett and Claire. n.d.\nCASA0005 Geographic\nInformation Systems and\nScience. Accessed October 9, 2024. https://andrewmaclachlan.github.io/CASA0005repo/index.html.\n\n\nEditor, CSRC Content. n.d. “Metadata - Glossary\n CSRC.” Accessed October 14, 2024. https://csrc.nist.gov/glossary/term/metadata.\n\n\n“FAIR Principles.” n.d. GO\nFAIR. Accessed October 7, 2024. https://www.go-fair.org/fair-principles/.\n\n\n“Functional Documentation with Markdown and Version\nControl.” 2017. Leon Hassan. https://blog.leonhassan.co.uk/functional-documentation-with-markdown-and-version-control/.\n\n\n“Git - Gitglossary Documentation.” n.d.\nAccessed October 11, 2024. https://git-scm.com/docs/gitglossary.\n\n\n“Git Definitions and Terminology\nCheat Sheet.” n.d. Accessed October 11,\n2024. https://www.pluralsight.com/resources/blog/cloud/git-terms-explained.\n\n\nHiebel, Gerald, Gert Goldenberg, Caroline Grutsch, Klaus Hanke, and\nMarkus Staudt. 2021. “FAIR Data for Prehistoric\nMining Archaeology.” International Journal on Digital\nLibraries 22 (3): 267–77. https://doi.org/10.1007/s00799-020-00282-8.\n\n\nIatropoulou, Katerina. n.d. “OpenAIRE.”\nOpenAIRE. Accessed October 7, 2024. https://www.openaire.eu/.\n\n\n“Introduction to Programming\nLanguages.” 2018. GeeksforGeeks. https://www.geeksforgeeks.org/introduction-to-programming-languages/.\n\n\n“Issue a Doi with Zenodo.” n.d. Github for\nCollaborative Documentation. Accessed October 11, 2024. https://cassgvp.github.io/github-for-collaborative-documentation/docs/tut/6-Zenodo-integration.html.\n\n\njimmy. 2022. “How to Organize GitHub\nRepositories.” Backrightup. https://backrightup.com/blog/how-to-organize-github-repositories/.\n\n\nLamprecht, Anna-Lena, Leyla Garcia, Mateusz Kuzak, Carlos Martinez,\nRicardo Arcila, Eva Martin Del Pico, Victoria Dominguez Del Angel, et\nal. 2020. “Towards FAIR Principles\nFor&nbsp;research&nbsp;software.” Data Science 3\n(1): 37–59. https://doi.org/10.3233/DS-190026.\n\n\n“Learn R, Python & Data\nScience Online.” n.d. Accessed October\n8, 2024. https://www.datacamp.com.\n\n\nLien-Talks, Alphaeus. 2024. “How FAIR Is\nBioarchaeological Data: With a\nParticular Emphasis on Making\nArchaeological Science Data\nReusable.” Journal of Computer Applications in\nArchaeology 7 (1). https://doi.org/10.5334/jcaa.154.\n\n\n“Markdown Guide.” n.d. Accessed October 7,\n2024. https://www.markdownguide.org/.\n\n\nMarwick, Ben. 2017. “Open Science in\nArchaeology,” January. https://doi.org/10.17605/OSF.IO/3D6XX.\n\n\n“Metadata.” 2024. Wikipedia. https://en.wikipedia.org/w/index.php?title=Metadata&oldid=1250210606.\n\n\n“Module-5-Open-Research-Software-and-Open-Source/Content_development/Task_2.md\nat Master ·\nOpenScienceMOOC/Module-5-Open-Research-Software-and-Open-Source.”\nn.d. GitHub. Accessed October 11, 2024. https://github.com/OpenScienceMOOC/Module-5-Open-Research-Software-and-Open-Source/blob/master/content_development/Task_2.md.\n\n\nNational Academies of Sciences, Engineering, Policy and Global Affairs,\nEngineering Committee on Science, Board on Research Data Information,\nDivision on Engineering and Physical and Sciences, Committee on Applied\nand Theoretical Statistics, Board on Mathematical Sciences Analytics, et\nal. 2019. “Understanding Reproducibility and\nReplicability.” In Reproducibility and\nReplicability in Science. National\nAcademies Press (US). https://www.ncbi.nlm.nih.gov/books/NBK547546/.\n\n\nNicholson, Christopher, Sarah Kansa, Neha Gupta, and Rachel Fernandez.\n2023. “Will It Ever Be\nFAIR?: Making Archaeological\nData Findable, Accessible,\nInteroperable, and Reusable.”\nAdvances in Archaeological Practice 11 (1): 63–75. https://doi.org/10.1017/aap.2022.40.\n\n\nObregon, Alexander. 2024. “What Is\nMarkdown? Uses and Benefits\nExplained.” Medium. https://medium.com/@AlexanderObregon/what-is-markdown-uses-and-benefits-explained-947300e1f955.\n\n\n“Online Courses - Learn\nAnything, On Your\nSchedule  Udemy.” n.d.\nAccessed October 8, 2024. https://www.udemy.com/.\n\n\nR Core Team. 2024. R: A Language and\nEnvironment for Statistical\nComputing. Vienna, Austria: R Foundation for\nStatistical Computing. https://www.R-project.org/.\n\n\n“Referencing and Citing Content.” n.d. GitHub\nDocs. Accessed October 11, 2024. https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content.\n\n\nSignell, Rich. 2013. “How to Handle Releases of Markdown Document\non Github.” Forum post. Stack Overflow. https://stackoverflow.com/q/19727632/6199967.\n\n\n“Spatial Without Compromise · QGIS\nWeb Site.” n.d. Accessed October 7,\n2024. https://qgis.org/.\n\n\nSuhail, Muhammad Ahmed. 2024. “Structuring and\nOrganizing My Github: A\nDeveloper’s Guide.” Medium. https://medium.com/@muhammadahmedsuhail007/structuring-and-organizing-my-github-a-developers-guide-7353610f04fd.\n\n\n“What Is FAIR?” n.d. Accessed October 14,\n2024. https://www.howtofair.dk/what-is-fair/.\n\n\n“What Is Markdown? Syntax,\nExamples, Usage, Best\nPractices.” 2021. https://www.knowledgehut.com/blog/web-development/what-is-markdown.\n\n\n“What Is Metadata and How Does It Work?” n.d.\nWhatIs. Accessed October 14, 2024. https://www.techtarget.com/whatis/definition/metadata.\n\n\n“What Is Programming? And\nHow To Get\nStarted.” 2024. Coursera. https://www.coursera.org/articles/what-is-programming.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg,\nGabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al.\n2016. “The FAIR Guiding\nPrinciples for Scientific Data Management and\nStewardship.” Scientific Data 3 (1): 160018. https://doi.org/10.1038/sdata.2016.18.\n\n\n“Zenodo - Research. Shared.” n.d.\nAccessed October 11, 2024. https://help.zenodo.org/docs/profile/linking-accounts/.\n\n\nZestyclose-Low-6403. 2023. “How to Organize Repos Within an\n’Organization’?” Reddit {Post}. R/Github. www.reddit.com/r/github/comments/188d324/how_to_organize_repos_within_an_organization/.",
    "crumbs": [
      "References"
    ]
  }
]